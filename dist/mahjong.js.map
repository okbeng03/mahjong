{"version":3,"file":"mahjong.js","sources":["../node_modules/_tslib@1.8.1@tslib/tslib.es6.js","../src/player.ts","../src/tile.ts","../src/table/data.ts","../src/rules/basic.ts","../src/rules/bonus.ts","../src/playerDetail.ts","../src/ai/basic.ts","../src/wall.ts","../src/round.ts","../src/game.ts","../src/main.ts"],"sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = Object.setPrototypeOf ||\r\n    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = Object.assign || function __assign(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n    }\r\n    return t;\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [0, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);  }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { if (o[n]) i[n] = function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; }; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator];\r\n    return m ? m.call(o) : typeof __values === \"function\" ? __values(o) : o[Symbol.iterator]();\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n","export default class Player {\n  readonly id: number;\n  readonly name: string;\n  readonly pick: number;\n  readonly isAI: boolean;\n\n  constructor(id: number, name: string, pick: number, isAI: boolean = false) {\n    this.id = id;\n    this.name = name;\n    this.pick = pick;\n    this.isAI = isAI;\n  }\n};\n","import * as _ from 'lodash';\n\nexport enum Card {\n  // 万\n  CharacterOne = 1,\n  CharacterTwo,\n  CharacterThree,\n  CharacterFour,\n  CharacterFive,\n  CharacterSix,\n  CharacterSeven,\n  CharacterEight,\n  CharacterNight,\n  // 筒\n  DotOne = 11,\n  DotTwo,\n  DotThree,\n  DotFour,\n  DotFive,\n  DotSix,\n  DotSeven,\n  DotEight,\n  DotNight,\n  // 条\n  BambooOne = 21,\n  BambooTwo,\n  BambooThree,\n  BambooFour,\n  BambooFive,\n  BambooSix,\n  BambooSeven,\n  BambooEight,\n  BambooNight,\n  // 风牌\n  East = 31,\n  South = 33,\n  West = 35,\n  North = 37,\n  // 箭牌\n  Green = 41, // 发财\n  Red = 43,   // 红中\n  White = 45, // 白板\n  // 花\n  Spring = 51,\n  Summer,\n  Autumn,\n  Winter,\n  Plum,\n  Orchid,\n  Bamboo,\n  Chrysanthemum\n};\n\nexport enum ClaimType {\n  None,\n  Chow,           // 吃\n  Pong,           // 碰\n  Expose,         // 明杠\n  ExposeSelfDraw, // 明杠暗杠\n  ConcealedKong,  // 暗杠\n  Flower,         // 花胡\n  Win,            // 胡\n  SelfDraw,       // 自摸\n  Kong,           // 杠上开花\n  FirstFollow,    // 首张被跟\n  BaoPai          // 包牌\n};\n\nexport enum Pick {\n  East = 1,\n  South,\n  West,\n  North\n};\n\nconst NumberCard = [\n  Card.CharacterOne,\n  Card.CharacterTwo,\n  Card.CharacterThree,\n  Card.CharacterFour,\n  Card.CharacterFive,\n  Card.CharacterSix,\n  Card.CharacterSeven,\n  Card.CharacterEight,\n  Card.CharacterNight,\n  Card.DotOne,\n  Card.DotTwo,\n  Card.DotThree,\n  Card.DotFour,\n  Card.DotFive,\n  Card.DotSix,\n  Card.DotSeven,\n  Card.DotEight,\n  Card.DotNight,\n  Card.BambooOne,\n  Card.BambooTwo,\n  Card.BambooThree,\n  Card.BambooFour,\n  Card.BambooFive,\n  Card.BambooSix,\n  Card.BambooSeven,\n  Card.BambooEight,\n  Card.BambooNight\n];\nconst WindCard = [\n  Card.East,\n  Card.South,\n  Card.West,\n  Card.North\n];\nconst DragonCard = [\n  Card.Green,\n  Card.Red,\n  Card.White\n];\nconst FlowerCard = [\n  Card.Spring,\n  Card.Summer,\n  Card.Autumn,\n  Card.Winter,\n  Card.Plum,\n  Card.Orchid,\n  Card.Bamboo,\n  Card.Chrysanthemum\n];\n\n// 拼接\nfunction concatTiles(cards: number[], tiles: number[]): number[] {\n  for (let i of cards) {\n    tiles = tiles.concat([i, i, i, i]);\n  }\n\n  return tiles;\n}\n\n/**\n * 获取默认牌\n * @param hasWind 是否有风牌\n * @param hasDragon 是否有箭牌\n * @param hasFlower 是否有花\n */\nexport let getTiles = function(hasWind = true, hasDragon = true, hasFlower = true): number[] {\n  let tiles: number[] = [];\n\n  tiles = concatTiles(NumberCard, tiles);\n\n  if (hasWind) {\n    tiles = concatTiles(WindCard, tiles);\n  }\n\n  if (hasDragon) {\n    tiles = concatTiles(DragonCard, tiles);\n  }\n\n  if (hasFlower) {\n    for (let i of FlowerCard) {\n      tiles.push(i);\n    }\n  }\n\n  return tiles;\n}\n\nexport const cardMaps: _.Dictionary<string> = {\n  // 万\n  CharacterOne: '一万',\n  CharacterTwo: '二万',\n  CharacterThree: '三万',\n  CharacterFour: '四万',\n  CharacterFive: '五万',\n  CharacterSix: '六万',\n  CharacterSeven: '七万',\n  CharacterEight: '八万',\n  CharacterNight: '九万',\n  // 筒\n  DotOne: '一筒',\n  DotTwo: '二筒',\n  DotThree: '三筒',\n  DotFour: '四筒',\n  DotFive: '五筒',\n  DotSix: '六筒',\n  DotSeven: '七筒',\n  DotEight: '八筒',\n  DotNight: '九筒',\n  // 条\n  BambooOne: '一条',\n  BambooTwo: '二条',\n  BambooThree: '三条',\n  BambooFour: '四条',\n  BambooFive: '五条',\n  BambooSix: '六条',\n  BambooSeven: '七条',\n  BambooEight: '八条',\n  BambooNight: '九条',\n  // 风牌\n  East: '东风',\n  South: '南风',\n  West: '西风',\n  North: '北风',\n  // 箭牌\n  Green: '发财', // 发财\n  Red: '红中',   // 红中\n  White: '白板', // 白板\n  // 花\n  Spring: '春',\n  Summer: '夏',\n  Autumn: '秋',\n  Winter: '冬',\n  Plum: '梅',\n  Orchid: '兰',\n  Chrysanthemum: '菊',\n  Bamboo: '竹'\n};\n\nexport const cardSuitMaps: _.Dictionary<string> = (function(): _.Dictionary<string> {\n  const maps: _.Dictionary<string> = {};\n\n  for (var i in cardMaps) {\n    maps[cardMaps[i]] = i;\n  }\n\n  return maps;\n})();\n\n// 洗牌：随机打乱顺序\nexport let shuffleTiles = function(tiles: number[]): number[] {\n  return _.shuffle(_.shuffle(_.shuffle(tiles)));\n};\n\n// 通过id获取麻将名\nexport let getTileSuit = function(tile: number): string {\n  return cardMaps[Card[tile]];\n};\n\n// 通过麻将名获取id\nexport let getTileId = function(suit: string): number {\n  return Card[cardSuitMaps[suit] as keyof typeof Card];\n};\n\n// 排序\nexport let sortTiles = function(tiles: number[]): number[] {\n  return tiles.slice().sort(function(a: number, b: number): number {\n    return a - b;\n  });\n};\n\n// 批量导出麻将名\nexport let batchTilesSuit = function(tiles: number[], s: string = ','): string {\n  const suits = tiles.map(getTileSuit);\n\n  return suits.join(s);\n};\n\n// 批量导出id\nexport let batchTilesId = function(suit: string, s: string = ','): number[] {\n  const suits = suit.split(s);\n\n  return suits.map(getTileId);\n};\n","\n    import * as _ from 'lodash';\n    export const assembly: _.Dictionary<number[]> = {\"3\":[111,3],\"6\":[222,1221,11211,111111,411,141,114,1113,3111,33],\"9\":[333,2331,22311,222111,2223,1332,12321,122211,1221111,4221,1224,12213,11322,112221,1121211,11211111,41211,14211,11241,11214,112113,111222,1111221,11111211,111111111,411111,141111,114111,111411,111141,111114,1111113,441,414,4113,144,1413,1143,1113111,11133,3222,31221,311211,3111111,3411,3141,3114,31113,33111],\"12\":[444,3441,33411,333111,3333,2442,23421,233211,2331111,2334,23313,22422,223221,2231211,22311111,22341,22314,223113,222222,2221221,22211211,222111111,222411,222141,222114,2221113,2223111,22233,1443,13431,133311,1332111,4332,13323,12432,123321,1232211,12321111,42321,12324,123213,122322,1222221,12221211,122211111,422211,122241,122214,1222113,1221222,12211221,122111211,4221111,1224111,1221411,1221141,1221114,12211113,4224,42213,12243,12213111,122133,11433,113331,1132311,11322111,41322,14322,113223,112332,1122321,11222211,112221111,412221,142221,112224,1122213,1121322,11212221,112121211,4121211,1421211,1124211,1121241,1121214,11212113,11211222,112111221,311211111,41211111,14211111,11241111,11214111,11211411,11211141,11211114,44211,41241,41214,412113,14241,14214,142113,11244,112413,112143,112113111,1121133,111333,1112331,11122311,111222111,411222,141222,114222,1112223,1111332,11112321,111122211,4111221,1411221,1141221,1114221,1111224,11112213,11111322,111112221,311111211,41111211,14111211,11411211,11141211,11114211,11111241,11111214,111111222,411111111,141111111,114111111,111411111,111141111,111114111,111111411,111111141,111111114,441111,414111,411411,411141,411114,4111113,144111,141411,141141,141114,1411113,114411,114141,114114,1141113,111441,111414,1114113,111144,1111413,1111143,11111133,4413,4143,4113111,41133,1413111,14133,1143111,1113222,11131221,111311211,1113411,1113141,1113114,11131113,11133111,32331,322311,3222111,32223,31332,312321,3122211,31221111,34221,31224,312213,311322,3112221,31121211,341211,314211,311241,311214,3112113,3111222,31111221,3411111,3141111,3114111,3111411,3111141,3111114,31111113,3414,34113,3144,31413,31143,31113111,311133,33222,331221,3311211,33111111,33141,33114,331113]};\n    export const eyeAssembly: _.Dictionary<number[]> = {\"2\":[2],\"5\":[311,2111,23,131,32,113,1112],\"8\":[422,3221,31211,311111,341,314,3113,2222,21221,211211,2111111,2411,2141,2114,21113,23111,233,242,1421,13211,131111,431,134,1313,3311,32111,323,224,1241,11411,113111,413,143,1133,3131,332,1223,11231,111311,1112111,4112,1412,1142,11123,12212,11213,111131,11132,31112,112112,111113,1111112],\"11\":[4331,42311,422111,4223,3332,32321,322211,3221111,3224,32213,31322,312221,3121211,31211111,34211,31241,31214,312113,311222,3111221,31111211,311111111,341111,314111,311411,311141,311114,3111113,3113111,344,3413,3143,31133,2333,22331,222311,2222111,22223,21332,212321,2122211,21221111,24221,21224,212213,211322,2112221,21121211,211211111,241211,214211,211241,211214,2112113,2111222,21111221,211111211,2411111,2141111,2114111,2111411,2111141,2111114,21111113,21113111,2441,2414,24113,2144,21413,21143,211133,23222,231221,2311211,23111111,23411,23141,23114,231113,233111,24311,242111,2423,14321,142211,1421111,4421,1424,14213,13322,132221,1321211,13211111,43211,13241,13214,132113,131222,1311221,13111211,131111111,431111,134111,131411,131141,131114,1311113,1313111,434,4313,1343,13133,3422,33221,331211,3311111,3341,3314,33113,32222,321221,3211211,32111111,32411,32141,32114,321113,323111,3233,224111,2243,124211,1241111,4241,1244,12413,114221,1141211,11411111,41411,14411,11441,11414,114113,113222,1131221,11311211,113111111,413111,143111,113411,113141,113114,1131113,1133111,443,4133,1433,11333,3242,31421,313211,3131111,3431,3134,31313,33311,332111,3323,1334,12341,122411,1223111,12233,11342,112421,1123211,11231111,41231,14231,11234,112313,111422,1113221,11131211,111311111,411311,141311,114311,111341,111314,1113113,1112222,11121221,111211211,4112111,1412111,1142111,1112411,1112141,1112114,11121113,11123111,4412,4142,41123,1442,14123,11423,111233,33131,23312,22313,222131,22232,12323,122231,1221311,12212111,42212,12242,122123,11324,112241,1121411,11213111,41213,11243,112133,111242,1111421,11113211,111131111,411131,141131,114131,111431,111134,1111313,1113311,11132111,41132,14132,11432,111323,31223,311231,3111311,31112111,34112,31412,31142,311123,223112,222113,123212,122213,1221131,122132,112223,1121231,11211311,112112111,412112,142112,112412,112142,1121123,111224,1111241,11111411,111113111,411113,141113,111413,111143,1111133,1113131,111332,312212,311213,3111131,311132,331112,2221112,1222112,1221113,1122212,1121213,11211131,1121132,1111223,11111231,111111311,4111112,1411112,1141112,1114112,1111412,1111142,11111123,3112112,12211112,11212112,11211113,11112212,11111213,111111131,11111132,11131112,31111112,112111112,111112112,111111113],\"14\":[4442,43421,433211,4331111,4334,43313,42422,423221,4231211,42311111,42341,42314,423113,422222,4221221,42211211,422111111,422411,422141,422114,4221113,4223111,42233,3443,33431,333311,3332111,33323,32432,323321,3232211,32321111,32324,323213,322322,3222221,32221211,322211111,322241,322214,3222113,3221222,32211221,322111211,3224111,3221411,3221141,3221114,32211113,32213111,32243,322133,31433,313331,3132311,31322111,34322,313223,312332,3122321,31222211,312221111,342221,312224,3122213,3121322,31212221,312121211,3421211,3124211,3121241,3121214,31212113,31211222,312111221,34211111,31241111,31214111,31211411,31211141,31211114,312111113,312113111,34241,34214,342113,31244,312413,312143,3121133,311333,3112331,31122311,311222111,341222,314222,3112223,3111332,31112321,311122211,3411221,3141221,3114221,3111224,31112213,31111322,311112221,34111211,31411211,31141211,31114211,31111241,31111214,311112113,311111222,341111111,314111111,311411111,311141111,311114111,311111411,311111141,311111114,344111,341411,341141,341114,3411113,314411,314141,314114,3141113,311441,311414,3114113,311144,3111413,3111143,31111133,3113222,31131221,311311211,3413111,3143111,3113411,3113141,3113114,31131113,31133111,34133,2444,23441,233411,2333111,23333,22442,223421,2233211,22331111,22334,223313,222422,2223221,22231211,222311111,222341,222314,2223113,2222222,22221221,222211211,2222411,2222141,2222114,22221113,22223111,222233,21443,213431,2133311,21332111,24332,213323,212432,2123321,21232211,212321111,242321,212324,2123213,2122322,21222221,212221211,2422211,2122241,2122214,21222113,21221222,212211221,24221111,21224111,21221411,21221141,21221114,212211113,212213111,24224,242213,212243,2122133,211433,2113331,21132311,211322111,241322,214322,2113223,2112332,21122321,211222211,2412221,2142221,2112224,21122213,21121322,211212221,24121211,21421211,21124211,21121241,21121214,211212113,211211222,241211111,214211111,211241111,211214111,211211411,211211141,211211114,244211,241241,241214,2412113,214241,214214,2142113,211244,2112413,2112143,21121133,2111333,21112331,211122311,2411222,2141222,2114222,21112223,21111332,211112321,24111221,21411221,21141221,21114221,21111224,211112213,211111322,241111211,214111211,211411211,211141211,211114211,211111241,211111214,2441111,2414111,2411411,2411141,2411114,24111113,2144111,2141411,2141141,2141114,21411113,2114411,2114141,2114114,21141113,2111441,2111414,21114113,2111144,21111413,21111143,211111133,21113222,211131221,24113111,21413111,21143111,21113411,21113141,21113114,211131113,211133111,24413,24143,241133,214133,232331,2322311,23222111,232223,231332,2312321,23122211,231221111,234221,231224,2312213,2311322,23112221,231121211,2341211,2314211,2311241,2311214,23112113,23111222,231111221,23411111,23141111,23114111,23111411,23111141,23111114,231111113,231113111,23414,234113,23144,231413,231143,2311133,233222,2331221,23311211,233111111,233141,233114,2331113,24422,243221,2431211,24311111,24341,24314,243113,242222,2421221,24211211,242111111,242411,242141,242114,2421113,2423111,24233,14432,143321,1432211,14321111,44321,14324,143213,142322,1422221,14221211,142211111,442211,142241,142214,1422113,1421222,14211221,142111211,4421111,1424111,1421411,1421141,1421114,14211113,14213111,4424,44213,14243,142133,13433,133331,1332311,13322111,43322,133223,132332,1322321,13222211,132221111,432221,132224,1322213,1321322,13212221,132121211,4321211,1324211,1321241,1321214,13212113,13211222,132111221,43211111,13241111,13214111,13211411,13211141,13211114,132111113,132113111,43241,43214,432113,13244,132413,132143,1321133,131333,1312331,13122311,131222111,431222,134222,1312223,1311332,13112321,131122211,4311221,1341221,1314221,1311224,13112213,13111322,131112221,43111211,13411211,13141211,13114211,13111241,13111214,131112113,131111222,431111111,134111111,131411111,131141111,131114111,131111411,131111141,131111114,434111,431411,431141,431114,4311113,134411,134141,134114,1341113,131441,131414,1314113,131144,1311413,1311143,13111133,1313222,13131221,131311211,4313111,1343111,1313411,1313141,1313114,13131113,13133111,4343,43133,34331,342311,3422111,34223,33332,332321,3322211,33221111,33224,332213,331322,3312221,33121211,331211111,334211,331241,331214,3312113,3311222,33111221,331111211,3341111,3314111,3311411,3311141,3311114,33111113,33113111,3344,33413,33143,331133,32333,322331,3222311,32222111,322223,321332,3212321,32122211,321221111,324221,321224,3212213,3211322,32112221,321121211,3241211,3214211,3211241,3211214,32112113,32111222,321111221,32411111,32141111,32114111,32111411,32111141,32111114,321111113,321113111,32441,32414,324113,32144,321413,321143,3211133,323222,3231221,32311211,323111111,323411,323141,323114,3231113,3233111,224222,2241221,22411211,224111111,224411,224141,224114,2241113,2243111,22433,124322,1242221,12421211,124211111,424211,124241,124214,1242113,1241222,12411221,124111211,4241111,1244111,1241411,1241141,1241114,12411113,12413111,4244,42413,12443,124133,114332,1142321,11422211,114221111,414221,144221,114224,1142213,1141322,11412221,114121211,4141211,1441211,1144211,1141241,1141214,11412113,11411222,114111221,41411111,14411111,11441111,11414111,11411411,11411141,11411114,114111113,114113111,44411,41441,41414,414113,14441,14414,144113,11444,114413,114143,1141133,113333,1132331,11322311,113222111,413222,143222,1132223,1131332,11312321,113122211,4131221,1431221,1134221,1131224,11312213,11311322,113112221,41311211,14311211,11341211,11314211,11311241,11311214,113112113,113111222,413111111,143111111,113411111,113141111,113114111,113111411,113111141,113111114,443111,413411,413141,413114,4131113,143411,143141,143114,1431113,113441,113414,1134113,113144,1131413,1131143,11311133,1133222,11331221,113311211,4133111,1433111,1133411,1133141,1133114,11331113,11333111,4433,41333,14333,324311,3242111,32423,314321,3142211,31421111,34421,31424,314213,313322,3132221,31321211,313211111,343211,313241,313214,3132113,3131222,31311221,313111211,3431111,3134111,3131411,3131141,3131114,31311113,31313111,3434,34313,31343,313133,33422,333221,3331211,33311111,33341,33314,333113,332222,3321221,33211211,332111111,332411,332141,332114,3321113,3323111,33233,1334111,13343,1234211,12341111,12344,123413,1224221,12241211,122411111,122441,122414,1224113,1223222,12231221,122311211,1223411,1223141,1223114,12231113,12233111,122333,1134311,11342111,41342,14342,113423,1124321,11242211,112421111,412421,142421,112424,1124213,1123322,11232221,112321211,4123211,1423211,1123241,1123214,11232113,11231222,112311221,41231111,14231111,11234111,11231411,11231141,11231114,112311113,112313111,44231,41234,412313,14234,142313,112343,1123133,1114331,11142311,111422111,411422,141422,114422,1114223,1113332,11132321,111322211,4113221,1413221,1143221,1113224,11132213,11131322,111312221,41131211,14131211,11431211,11134211,11131241,11131214,111312113,111311222,411311111,141311111,114311111,111341111,111314111,111311411,111311141,111311114,441311,414311,411341,411314,4113113,144311,141341,141314,1413113,114341,114314,1143113,111344,1113413,1113143,11131133,1112333,11122331,111222311,4112222,1412222,1142222,11122223,11121332,111212321,41121221,14121221,11421221,11124221,11121224,111212213,111211322,411211211,141211211,114211211,111241211,111214211,111211241,111211214,4412111,4142111,4112411,4112141,4112114,41121113,1442111,1412411,1412141,1412114,14121113,1142411,1142141,1142114,11421113,1112441,1112414,11124113,1112144,11121413,11121143,111211133,11123222,111231221,41123111,14123111,11423111,11123411,11123141,11123114,111231113,111233111,44123,41423,411233,14423,141233,114233,33242,331421,3313211,33131111,33134,331313,34412,333131,23423,233231,2331311,23312111,23342,233123,22424,223241,2231411,22313111,22343,223133,222242,2221421,22213211,222131111,222431,222134,2221313,2223311,22232111,222323,12434,123341,1232411,12323111,42323,123233,122342,1222421,12223211,122231111,422231,122234,1222313,1221422,12213221,122131211,4221311,1224311,1221341,1221314,12213113,12212222,122121221,42212111,12242111,12212411,12212141,12212114,122121113,122123111,42242,422123,122423,1221233,11324111,41324,113243,11224211,112241111,412241,112244,1122413,11214221,112141211,4121411,1124411,1121441,1121414,11214113,11213222,112131221,41213111,11243111,11213411,11213141,11213114,112131113,112133111,41243,412133,112433,1121333,11124311,111242111,411242,141242,114242,1112423,11114321,111142211,4111421,1411421,1141421,1114421,1111424,11114213,11113322,111132221,41113211,14113211,11413211,11143211,11113241,11113214,111132113,111131222,411131111,141131111,114131111,111431111,111134111,111131411,111131141,111131114,441131,414131,411431,411134,4111313,144131,141431,141134,1411313,114431,114134,1141313,111434,1114313,1111343,11113133,1113422,11133221,111331211,4113311,1413311,1143311,1113341,1113314,11133113,11132222,111321221,41132111,14132111,11432111,11132411,11132141,11132114,111321113,111323111,44132,41432,411323,141323,114323,1113233,31334,312341,3122411,31223111,312233,311342,3112421,31123211,311231111,341231,314231,311234,3112313,3111422,31113221,311131211,3411311,3141311,3114311,3111341,3111314,31113113,31112222,311121221,34112111,31412111,31142111,31112411,31112141,31112114,311121113,311123111,34142,341123,31442,314123,311423,3111233,334112,234212,233213,2331131,233132,223223,2231231,22311311,223112111,223412,223142,2231123,222224,2221241,22211411,222113111,222413,222143,2221133,2223131,222332,134312,133313,1332131,133232,123323,1232231,12321311,123212111,423212,123242,1232123,122324,1222241,12221411,122213111,422213,122243,1222133,1221242,12211421,122113211,4221131,1224131,1221431,1221134,12211313,12213311,122132111,422132,122432,1221323,112334,1122341,11222411,112223111,412223,142223,1122233,1121342,11212421,112123211,4121231,1421231,1124231,1121234,11212313,11211422,112113221,41211311,14211311,11241311,11214311,11211341,11211314,112113113,112112222,412112111,142112111,112412111,112142111,112112411,112112141,112112114,442112,412412,412142,4121123,142412,142142,1421123,112442,1124123,1121423,11211233,111224111,411224,141224,1112243,111124211,4111241,1411241,1114241,1111244,11112413,111114221,41111411,14111411,11141411,11114411,11111441,11111414,111114113,111113222,411113111,141113111,111413111,111143111,111113411,111113141,111113114,441113,411413,411143,4111133,141413,141143,1411133,111443,1114133,1111433,11111333,1113242,11131421,111313211,4113131,1413131,1143131,1113431,1113134,11131313,11133311,111332111,411332,141332,1113323,323312,322313,3222131,322232,312323,3122231,31221311,312212111,342212,312242,3122123,311324,3112241,31121411,311213111,341213,311243,3112133,3111242,31111421,311113211,3411131,3141131,3114131,3111431,3111134,31111313,31113311,311132111,341132,314132,311432,3111323,331223,3311231,33111311,331112111,331412,331142,3311123,3331112,2332112,2232212,2231213,22311131,2231132,2221223,22211231,222111311,2224112,2221412,2221142,22211123,1333112,1332113,1233212,1232213,12321131,1232132,1222223,12221231,122211311,4222112,1222412,1222142,12221123,1221224,12211241,122111411,1221413,1221143,12211133,12213131,1221332,1133312,1132313,11322131,1132232,1122323,11222231,112221311,4122212,1422212,1122242,11222123,1121324,11212241,112121411,4121213,1421213,1121243,11212133,11211242,112111421,41211131,14211131,11241131,11214131,11211431,11211134,112111313,112113311,4121132,1421132,1124132,1121432,11211323,1111334,11112341,111122411,4111223,1411223,1141223,11112233,11111342,111112421,41111231,14111231,11411231,11141231,11114231,11111234,111112313,111111422,411111311,141111311,114111311,111411311,111141311,111114311,111111341,111111314,4411112,4141112,4114112,4111412,4111142,41111123,1441112,1414112,1411412,1411142,14111123,1144112,1141412,1141142,11411123,1114412,1114142,11141123,1111442,11114123,11111423,111111233,11133131,3223112,3123212,31221131,3122132,31121231,311211311,3412112,3142112,3112412,3112142,31121123,31113131,3312212,3311213,33111131,3311132,23311112,22312112,22311113,22212212,22211213,222111131,22211132,22231112,13321112,12322112,12321113,12222212,12221213,122211131,12221132,12211223,122111231,42211112,12241112,12214112,12211412,12211142,122111123,11323112,11322113,11223212,11222213,112221131,11222132,11212223,112121231,41212112,14212112,11242112,11212412,11212142,112121123,11211224,112111241,41211113,11241113,11211413,11211143,112111133,112113131,11211332,11123312,11122313,111222131,11122232,11112323,111122231,41112212,14112212,11412212,11142212,11112242,111122123,11111324,111112241,41111213,14111213,11411213,11141213,11111243,111112133,111111242,411111131,141111131,114111131,111411131,111141131,111114131,111111431,111111134,41111132,14111132,11411132,11141132,11114132,11111432,111111323,11131223,111311231,41131112,14131112,11431112,11134112,11131412,11131142,111311123,32221112,31222112,31221113,31122212,31121213,311211131,31121132,31111223,311111231,34111112,31411112,31141112,31114112,31111412,31111142,311111123,33112112,223111112,222112112,222111113,123211112,122212112,122211113,122112212,122111213,122111132,122131112,113221112,112222112,112221113,112122212,112121213,112121132,112111223,412111112,142111112,112411112,112141112,112114112,112111412,112111142,111223112,111222113,111123212,111122213,111122132,111112223,411112112,141112112,114112112,111412112,111142112,111112412,111112142,111111224,411111113,141111113,111411113,111141113,111111413,111111143,111111332,111312212,111311213,111311132,111331112,312211112,311212112,311211113,311112212,311111213,311111132,311131112,331111112]};\n  ","// 基础规则\nimport * as _ from 'lodash';\nimport Player from '../playerDetail';\nimport { Meld, MeldDetail } from '../meld';\nimport { Card, ClaimType, sortTiles } from '../tile';\nimport { assembly, eyeAssembly } from '../table/data';\n\nconst thirteenOrphans = [\n  Card.CharacterOne,\n  Card.CharacterNight,\n  Card.DotOne,\n  Card.DotNight,\n  Card.BambooOne,\n  Card.BambooNight,\n  Card.East,\n  Card.South,\n  Card.West,\n  Card.North,\n  Card.Green,\n  Card.Red,\n  Card.White\n];\n\n// 检查是否胡牌\nexport function canWin(player: Player, tile: number = 0): boolean {\n  let tiles\n  \n  if (tile > 0) {\n    tiles = sortTiles(player.handTiles.slice().concat([tile]));\n  } else {\n    tiles = sortTiles(player.handTiles.slice());\n  }\n  \n  const remainTiles = checkMelds(tiles, player);\n\n  if (remainTiles.length && player.handTiles.length === 14) {\n    // 七小对，十三幺\n    const readyTiles = checkPair(player.handTiles);\n\n    if (!readyTiles.length) {\n      return true;\n    }\n\n    const readyTile = checkUniq(player.handTiles);\n\n    if (readyTile === 0) {\n      return true;\n    }\n  }\n\n  player.remainTiles = remainTiles;\n\n  return !remainTiles.length;\n}\n\n// 检查是否可以听牌\nexport function canReadyHand(player: Player): void {\n  const tiles = sortTiles(player.handTiles.slice());\n  const remainTiles = checkMelds(tiles, player);\n\n  // 找出剩余的牌\n  if (remainTiles.length) {\n    // 找出是否可以听牌、听什么牌\n    player.remainTiles = remainTiles;\n    checkReadyHand(player);\n  }\n}\n\n// 花胡\nexport function canFlowerWin(tiles: number[], tile: number): number {\n  const len = tiles.length;\n\n  if (len >= 4) {\n    tiles = sortTiles(tiles);\n\n    if (tile < Card.Plum && tiles.slice(0, 4).join('') === [Card.Spring, Card.Summer, Card.Autumn, Card.Winter].join('')) {\n      return 1;\n    }\n    \n    if (tile > Card.Winter && tiles.slice(len - 4).join('') === [Card.Plum, Card.Orchid, Card.Bamboo, Card.Chrysanthemum].join('')) {\n      return 2;\n    }\n  }\n\n  return 0;\n}\n\nconst dragon = [Card.Green, Card.Red, Card.White];\nconst pointEye = [2, 5, 8];\n\n// 是否有番\nexport function hasPoint(player: Player): boolean {\n  if (player.hasPoint) {\n    return true;\n  }\n\n  // 判断门前清\n  if (!player.chowTiles.length) {\n    return true;\n  }\n\n  const pick = player.pick;\n  const order = player.round.game.order;\n  const banker = player.round.game.banker;\n  const point = (pick + 4 - banker) % 4 + 1;\n\n  // 判断花\n  if (player.flowerTiles.length && _.findIndex(player.flowerTiles, tile => (tile - 50) % 4 === point) > -1) {\n    player.hasPoint = true;\n    return true;\n  }\n\n  const dragonTiles = dragon.slice().concat([(point - 1) * 2 + 31, (order - 1) * 2 + 31]);\n  let needPoint = false;\n  let len = player.chowTiles.length;\n\n  // 判断吃的牌是否有三张相同的红中、发财、白板或者令牌，四条有番\n  if (len) {\n    for (let i = 0; i < len; i++) {\n      const meld: MeldDetail = player.chowTiles[i];\n\n      if (meld.type === ClaimType.Pong && dragonTiles.indexOf(meld.tiles[0]) > -1) {\n        player.hasPoint = true;\n        break;\n      }\n\n      if (meld.type === ClaimType.ConcealedKong || meld.type === ClaimType.Expose) {\n        player.hasPoint = true;\n        break;\n      }\n\n      // 有碰，需要番\n      if (meld.type === ClaimType.Pong) {\n        needPoint = true;\n      }\n    }\n\n    if (player.hasPoint) {\n      return true;\n    }\n  }\n\n  const eye = player.eye[0][0];\n  const groups = _.groupBy(player.handTiles, function(tile) {\n    return tile / 1;\n  });\n  \n  // 对子是中、发、白，需要番\n  if (!needPoint) {\n    if (dragonTiles.indexOf(eye) > -1) {\n      needPoint = true;\n    }\n  }\n\n  let hasPoint = false;\n  const keys = Object.keys(groups);\n\n  // 手牌有三张相同的，需要番\n  if (!needPoint) {  \n    for (let j = 0, kLen = keys.length; j < kLen; j++) {\n      const group = groups[keys[j]];\n\n      if (group.length === 3 && group[0] !== eye) {\n        needPoint = true;\n        continue;\n      }\n\n      if (group.length === 3 && dragonTiles.indexOf(group[0]) > -1) {\n        hasPoint = true;\n      }\n    }\n  }\n\n  if (needPoint) {\n    for (let j = 0, kLen = keys.length; j < kLen; j++) {\n      const group = groups[keys[j]];\n\n      if (group.length === 3 && dragonTiles.indexOf(group[0]) > -1) {\n        hasPoint = true;\n        break;\n      }\n    }\n\n    // 258\n    // 手牌有三张相同的红中、发财、白板或者令牌\n    if ((eye < Card.East && pointEye.indexOf(eye % 10) > -1) || hasPoint) {\n      return true;\n    }\n  } else {\n    return true;\n  }\n\n  return false;\n}\n\n// 检查牌成组的牌\nfunction checkMelds(tiles: number[], player?: Player): number[] {\n  const orderGroups = groupByOrder(tiles, 1);\n  let remainTiles: number[] = [];\n\n  if (player) {\n    player.eye = [];\n  }\n\n  orderGroups.forEach(function(group) {\n    const len = group.length;\n    const remainder = len % 3;\n\n    if (remainder === 0 || remainder === 2) {\n      const size = groupSize(group);\n      const table = remainder === 2 ? eyeAssembly[len] : assembly[len];\n\n      if (_.indexOf(table, size) === -1) {\n        remainTiles = remainTiles.concat(group);\n        return;\n      }\n\n      // 找出将\n      if (remainder === 2 && player) {\n        player.eye.push(getEye(group, size));\n      }\n    } else {\n      remainTiles = remainTiles.concat(group);\n    }\n  });\n\n  return remainTiles;\n}\n\n// 找出是否可以听牌，听什么牌 \nfunction checkReadyHand(player: Player): void {\n  const remainTiles = player.remainTiles;\n  const eye = player.eye;\n  const len = remainTiles.length;\n  const eyeLen = eye.length;\n\n  player.readyHand = {};\n\n  if (player.handTiles.length === 14) {\n    // 七小对，十三幺\n    const readyTiles = checkPair(player.handTiles);\n\n    if (readyTiles.length === 2) {\n      player.readyHand[readyTiles[0]] = [readyTiles[1]];\n      player.readyHand[readyTiles[1]] = [readyTiles[0]];\n      return;\n    }\n\n    const readyTile = checkUniq(player.handTiles);\n\n    if (readyTile > 0) {\n      player.readyHand[readyTile] = thirteenOrphans;\n      return;\n    }\n  }\n\n  if (eyeLen > 2) {\n    return;\n  }\n\n  if (len === 1) {\n    if (eyeLen === 2) {\n      // 对碰\n      player.readyHand[remainTiles[0]] = [eye[0][0], eye[1][0]];\n    }\n\n    return;\n  }\n\n  if (eyeLen === 2) {\n    // 对碰\n    if (len === 1) {\n      player.readyHand[remainTiles[0]] = [eye[0][0], eye[1][0]];\n      return;\n    }\n\n    remainTiles.forEach((tile, idx) => {\n      const newTiles = remainTiles.slice();\n      newTiles.splice(idx, 1);\n\n      if (!checkMelds(newTiles).length) {\n        player.readyHand[tile] = [eye[0][0], eye[1][0]];\n      }\n    });\n\n    if (!_.isEmpty(player.readyHand)) {\n      return;\n    }\n  }\n\n  if (len === 2) {\n    if (eyeLen === 0) {\n      // 单吊\n      player.readyHand[remainTiles[0]] = [remainTiles[1]];\n      player.readyHand[remainTiles[1]] = [remainTiles[0]];\n    }\n\n    return;\n  }\n\n  // 复杂的来了\n  // 只能存在两种类型的牌，并且还要能和其他可连续\n  let typeGroups = groupByType(remainTiles);\n  const wordTiles = typeGroups.word;\n\n  // 大字超过两个，而且不是最后两个，不可能听牌\n  if ( wordTiles && wordTiles.length >= 2) {\n    return;\n  }\n\n  // 超过两个类型的不成组牌，不可能听牌\n  const typeKeys = Object.keys(typeGroups);\n  if (typeKeys.length > 2) {\n    return;\n  }\n\n  // 把同花色的牌一起拿出来比较，这样找才全\n  const tiles = sortTiles(player.handTiles);\n  typeGroups = groupByType(tiles);\n  let partTiles: number[][] = [];\n\n  typeKeys.forEach(function(type) {\n    if (type === 'word') {\n      return;\n    }\n\n    partTiles.push(typeGroups[type]);\n  });\n\n  // 如果有大字，肯定打大字才能听牌\n  if (wordTiles) {\n    partTiles.unshift(wordTiles);\n  }\n\n  player.readyHand = checkTing(partTiles);\n\n  // 如果只有用一个剩余分组，并且只有一个目，那还要判断是否存在对碰的情况\n  if (partTiles.length === 1 && eyeLen === 1 && partTiles[0].indexOf(eye[0][0]) === -1) {\n    partTiles.push(eye[0]);\n\n    const readyHand = checkTing(partTiles);\n    \n    if (!_.isEmpty(readyHand)) {\n      for (let key in readyHand) {\n        const item = player.readyHand[key];\n\n        if (typeof item !== 'undefined') {\n          player.readyHand[key] = _.union(item, readyHand[key]);\n        }\n      }\n    }\n  }\n}\n\n// 七小对\nfunction checkPair(tiles: number[]): number[] {\n  const groups = groupBy(tiles);\n  const keys = Object.keys(groups);\n  const len = keys.length;\n  const readyTiles = [];\n\n  if (len >= 7) {\n    for (let i = 0; i < len; i++) {\n      switch(groups[keys[i]].length) {\n        case 3:\n          readyTiles.push(groups[keys[i]][0]);\n        case 2:\n          break;\n        case 1:\n          readyTiles.push(groups[keys[i]][0]);\n          break;\n      }\n    }\n  }\n\n  return readyTiles;\n}\n\n// 十三幺\nfunction checkUniq(tiles: number[]): number {\n  const uniqTiles = _.uniq(sortTiles(tiles.slice()));\n\n  if (uniqTiles.length === 14) {\n    const remainTiles = _.pull(uniqTiles, ...thirteenOrphans);\n\n    if (!remainTiles.length) {\n      return 0;\n    } else if (remainTiles.length === 1) {\n      return remainTiles[0];\n    }\n  }\n\n  return -1;\n}\n\n// 检查出一张牌，抓什么牌可以成组\nfunction checkTing(tileGroup: number[][]): _.Dictionary<number[]> {\n  const readyHand: _.Dictionary<number[]> = {};\n  const gLen = tileGroup.length;\n\n  // 只有一个组，尝试打出每一张牌，剩下的牌抓一张能不能成组\n  if (gLen === 1) {\n    const tiles = tileGroup[0];\n    let last = 0;\n\n    for (let i = 0, len = tiles.length; i < len; i++) {\n      const newTiles = tiles.slice();\n      const tile = newTiles.splice(i, 1)[0];\n\n      if (tile === last) {\n        continue;\n      }\n\n      const tingTiles = canTing(newTiles);\n\n      if (tingTiles.length) {\n        readyHand[tile] = tingTiles;\n      }\n\n      last = tile;\n    }\n  }\n\n  // 两个组，判断哪组花色可以出，哪组花色可以抓\n  if (gLen === 2) {\n    const groups: number[][][] = [];  // [[[去掉的牌], [增加的牌]]]\n    const group1 = tileGroup[0];\n    const group2 = tileGroup[1];\n    const group1Len = group1.length;\n    const group2Len = group2.length;\n\n    if (group1[0] >= Card.East) {\n      // 如果有大字，肯定打大字才能听牌\n      groups.push(tileGroup)\n    } else {\n      if (remain02(group1Len - 1) && remain02(group2Len + 1)) {\n        groups.push([group1, group2]);\n      }\n\n      if (remain02(group2Len - 1) && remain02(group1Len + 1)) {\n        groups.push([group2, group1]);\n      }\n    }\n\n    groups.forEach(function(group) {\n      const tiles = group[0];\n      let last = 0;\n\n      // 先看移除掉的组是否能成牌，能成牌才加牌\n      for (let i = 0, len = tiles.length; i < len; i++) {\n        const newTiles = tiles.slice();\n        const tile = newTiles.splice(i, 1)[0];\n\n        if (tile === last) {\n          continue;\n        }\n        \n        const remainTiles = newTiles.length ? checkMelds(newTiles) : [];\n\n        if (!remainTiles.length) {\n          const tingTiles = canTing(group[1]);\n\n          if (tingTiles.length) {\n            readyHand[tile] = tingTiles;\n          }\n        }\n\n        last = tile;\n      }\n    });\n  }\n\n  return readyHand;\n}\n\n// 检查抓什么牌可以成组\nfunction canTing(tiles: number[]): number[] {\n  const tingTiles: number[] = [];\n  const len = tiles.length;\n  const base = 10 * Math.floor(tiles[0] / 10) + 1;\n  const min = Math.max(tiles[0] - 1, base);\n  const max = Math.min(tiles[len - 1] + 1, base + 8);\n\n  for (let i = min; i <= max; i++) {\n    const remainTiles = checkMelds(sortTiles(tiles.concat([i])));\n\n    if (!remainTiles.length) {\n      tingTiles.push(i);\n    }\n  }\n\n  return tingTiles;\n}\n\n// 将牌按[万、筒、条、大字]分组\nexport function groupByType(tiles: number[]): _.Dictionary<number[]> {\n  const characterTiles: number[] = [];\n  const dotTiles: number[] = [];\n  const bambooTiles: number[] = [];\n  const wordTiles: number[] = [];\n  const typeGroups: _.Dictionary<number[]> = {};\n\n  tiles.forEach(function(tile) {\n    const i = Math.floor(tile / 10);\n\n    switch(i) {\n      case 0:\n        characterTiles.push(tile);\n        break;\n      case 1:\n        dotTiles.push(tile);\n        break;\n      case 2:\n        bambooTiles.push(tile);\n        break;\n      default:\n        wordTiles.push(tile);\n        break;\n    }\n  });\n\n  if (characterTiles.length) {\n    typeGroups.character = characterTiles;\n  }\n\n  if (dotTiles.length) {\n    typeGroups.dot = dotTiles;\n  }\n\n  if (bambooTiles.length) {\n    typeGroups.bamboo = bambooTiles;\n  }\n\n  if (wordTiles.length) {\n    typeGroups.word = wordTiles;\n  }\n\n  return typeGroups;\n};\n\n// 找到指定间距的顺序分组\nexport function groupByOrder(allTiles: number[], g: number = 1): number[][] {\n  allTiles = allTiles.slice();\n  const typeGroups = groupByType(allTiles);\n  const groups: number[][] = [];\n\n  if (typeGroups.word) {\n    _group(typeGroups.word);\n  }\n\n  if (typeGroups.character) {\n    _group(typeGroups.character, g);\n  }\n\n  if (typeGroups.dot) {\n    _group(typeGroups.dot, g);\n  }\n\n  if (typeGroups.bamboo) {\n    _group(typeGroups.bamboo, g);\n  }\n  \n  function _group(tiles: number[], gap: number = 1): void {\n    let lastTile = tiles.splice(0, 1)[0];\n    let group: number[] = [lastTile];\n    const len = tiles.length;\n\n    for (let i = 0; i < len; i++) {\n      let tile = tiles[i];\n\n      if (tile - lastTile <= gap) {\n        group.push(tile);\n      } else {\n        groups.push(group);\n        group = [tile];\n      }\n\n      lastTile = tile;\n    }\n\n    groups.push(group);\n  }\n\n  return groups;\n};\n\n// 看牌是不是能成组，条件是3 * n + 2?\nfunction remain02(num: number): boolean {\n  const remainder = num % 3;\n\n  return remainder === 0 || remainder === 2;\n}\n\n// 获取将牌\n// tiles: 成组的牌, 12223; size: 每张牌的个数模型 131\n// 尝试把大于2个数的牌取走，看剩下的牌能不能成组，能则说明这个就是将\nfunction getEye(tiles: number[], size: number): number[] {\n  let tilesLen = tiles.length;\n\n  if (tilesLen === 2) {\n    return tiles;\n  }\n\n  let eye: number[] = [];\n  const sizes = size.toString().split('');\n  const uniqTiles = _.uniq(tiles);\n\n  for (let i = 0, len = sizes.length; i < len; i++) {\n    const item = parseInt(sizes[i]);\n\n    if (item >= 2) {\n      let flag = true;\n      let newSizes = sizes.slice();\n      newSizes[i] = (item - 2).toString();\n      newSizes = newSizes.join('').split('0');\n\n      newSizes.forEach(function(item) {\n        if (!item) {\n          return;\n        }\n\n        const i = parseInt(item);\n        const s = getSizeLength(i);\n\n        if (s % 3 !== 0 || _.indexOf(assembly[s], i) === -1) {\n          flag = false;\n        }\n      });\n\n      if (flag) {\n        eye = _.fill(Array(2), uniqTiles[i]);\n        break;\n      }\n    }\n  }\n\n  return eye;\n}\n\n// 获取长度: 根据每张牌的个数模型; \nfunction getSizeLength(size: number): number {\n  return size.toString().split('').reduce(function(sum, val): number {\n    return sum + parseInt(val);\n  }, 0);\n}\n\n// 获取每张牌个数模型\nexport function groupSize(tiles: number[]): number {\n  const groups = groupBy(tiles);\n  const sides: number[] = [];\n\n  _.values(groups).forEach(function(group) {\n    sides.push(group.length);\n  });\n\n  return parseInt(sides.join(''));\n}\n\n// 分组\nfunction groupBy(tiles: number[]): _.Dictionary<number[]> {\n  return _.groupBy(tiles, function(tile) {\n    return tile / 1;\n  });\n};\n\n// 是否可以行动\nexport function canClaim(tiles: number[], tile: number, canChow: boolean = true): Meld[] {\n  let melds: Meld[] = [];\n  melds = checkPong(tiles, tile);\n\n  if (canChow && tile < Card.East) {\n    melds = melds.concat(checkChow(tiles, tile));\n  }\n\n  return melds;\n};\n\n// 杠\nexport function canKong(tiles: number[], tile: number): Meld[] {\n  let melds: Meld[] = [];\n  let someTiles: number[] = getSomeTile(tiles, tile);\n  let len = someTiles.length;\n\n  if (len && len >= 4) {\n    melds[0] = {\n      tiles: someTiles.length === 4 ? someTiles : someTiles.concat(tile),\n      type: ClaimType.ConcealedKong\n    };\n  }\n\n  return melds;\n};\n\n// 碰\nfunction checkPong(tiles: number[], tile: number): Meld[] {\n  let melds: Meld[] = [];\n  let someTiles: number[] = getSomeTile(tiles, tile);\n  let len = someTiles.length;\n\n  if (len && len >= 2) {\n    melds = checkKong(someTiles, tile);\n\n    melds[melds.length] = {\n      tiles: melds.length ? someTiles : someTiles.concat(tile),\n      type: ClaimType.Pong\n    };\n  }\n\n  return melds;\n};\n\nfunction checkKong(tiles: number[], tile: number): Meld[] {\n  let melds: Meld[] = [];\n\n  if (tiles.length === 3) {\n    melds[0] = {\n      tiles: tiles.concat(tile),\n      type: ClaimType.Expose\n    };\n  }\n\n  return melds;\n};\n\n// 是否可以吃\nfunction checkChow(tiles: number[], tile: number): Meld[] {\n  let melds: Meld[] = [];\n  let rangeTiles: number[] = getRangeTile(tiles, tile);\n  let sequences = getSequence(rangeTiles, tile);\n\n  melds = sequences.map(function(sequence) {\n    return {\n      tiles: sequence,\n      type: ClaimType.Chow\n    }\n  });\n  \n  return melds;\n};\n\n// 获取相同的牌\nfunction getSomeTile(tiles: number[], tile: number): number[] {\n  let result: number[] = [];\n\n  tiles.forEach(function(i) {\n    if (i === tile) {\n      result.push(i);\n    }\n  });\n\n  return result;\n}\n\n// 获取指定范围的牌\nfunction getRangeTile(tiles: number[], tile: number): number[] {\n  let result: number[] = []\n  const min = Math.floor(tile / 10) * 10 + 1;\n  const max = min + 8;\n  let left = tile - 2;\n  left = Math.max(left, min);\n  let right = tile + 2;\n  right = Math.min(right, max);\n\n  tiles.forEach(function(i) {\n    if (i >= left && i <= right) {\n      result.push(i);\n    }\n  });\n\n  return result;\n}\n\n// 获取顺子\nfunction getSequence(tiles: number[], tile: number): number[][] {\n  let melds: number[][] = [];\n  tiles = _.uniq(_.xor(tiles, [tile]));\n\n  // 将牌组组成3个一起，然后判断是否是顺子\n  if (tiles.length >= 2) {\n    let sequences: number[][] = [];\n\n    for (let i = 0; i < tiles.length - 1; i++) {\n      sequences.push([tiles[i], tiles[i + 1], tile]);\n    }\n\n    sequences.forEach(function(meld) {\n      const newMeld = sortTiles(meld);\n\n      if (newMeld[0] === newMeld[1] - 1 && newMeld[2] === newMeld[1] + 1) {\n        melds.push(meld);\n      }\n    });\n  }\n\n  return melds;\n}\n","import * as _ from 'lodash';\n// import Bonus from '../bonus';\nimport Round from '../round';\nimport Player from '../playerDetail';\nimport { MeldDetail } from '../meld';\nimport { ClaimType, sortTiles, Card } from '../tile';\nimport { groupByType, groupSize } from './basic';\n\n// 胡牌类型\nexport enum WinType {\n  CommonHand = 1, // 平胡\n  Uniform,        // 清一色\n  Pong,           // 碰碰胡\n  Pair,           // 七小对\n  LuxuryPair,     // 豪华七小对\n  Uniq            // 十三幺\n};\n\n// 奖励类型\nexport enum BonusType {\n  Win = 1,        // 胡\n  SelfDraw,       // 自摸\n  Kong,           // 杠上开花\n  Sky,            // 天胡\n  Land,           // 地胡\n  FlowerSeason,   // 花胡\n  FlowerBotany,   // 花胡\n  Expose,         // 明杠\n  ConcealedKong,  // 暗杠\n  BaoPai,         // 包牌\n  Cannon,         // 放炮\n  FirstFollow     // 首张被跟\n};\n\nconst thirteenOrphans = [\n  Card.CharacterOne,\n  Card.CharacterNight,\n  Card.DotOne,\n  Card.DotNight,\n  Card.BambooOne,\n  Card.BambooNight,\n  Card.East,\n  Card.South,\n  Card.West,\n  Card.North,\n  Card.Green,\n  Card.Red,\n  Card.White\n];\n\nexport function calculate(round: Round): void {\n  const players = round.players;\n  const winner = players[round.winner];\n  const banker = round.game.banker;\n  const bankerCount = round.game.bankerCount + 1;\n  const cannons: number[] = _.fill(Array(players.length), 0); // 放炮、接炮\n\n  players.forEach(function(player) {\n    checkKong(player, players, cannons);\n    checkFlower(player);\n  });\n\n  const winScore = checkWin(winner);\n\n  if (winner.winFrom > -1) {\n    players[winner.winFrom].bonus.push(BonusType.Cannon);\n    cannons[winner.pick] += 1;\n    cannons[winner.winFrom] -= 1;\n  }\n\n  let isBaoPai = winner.fourMeld;\n\n  if (winner.threeMeld > -1 && winner.winFrom === winner.threeMeld) {\n    isBaoPai = winner.threeMeld;\n  }\n\n  if (round.wall.willDead()) {\n    isBaoPai = winner.winFrom;\n  }\n\n  // 包牌\n  if (isBaoPai > -1) {\n    compute(players, banker, bankerCount);\n    players[isBaoPai].bonus.push(BonusType.BaoPai);\n    let base = 1;\n    let score = 0;\n\n    if (winner.pick === banker) {\n      base = bankerCount;\n    }\n\n    for (let i = 0, len = players.length; i < len; i++) {\n      if (i === winner.pick) {\n        continue;\n      }\n\n      if (i === banker) {\n        base = bankerCount;\n      }\n\n      score += winScore * base;\n    }\n\n    winner.score += score;\n    players[isBaoPai].score -= score;\n  } else {\n    winner.score += winScore;\n    compute(players, banker, bankerCount);\n  }\n\n  addCannon(players, cannons);\n\n  // 首张被跟\n  if (_.indexOf(players[banker].bonus, BonusType.FirstFollow) > -1) {\n    players.forEach(function(player, i) {\n      if (i === banker) {\n        player.score -= 3;\n        return;\n      }\n\n      player.score += 1;\n    });\n  }\n}\n\n// 计算分数\nfunction compute(players: Player[], banker: number, bankerCount: number) {\n  const len = players.length;\n  const bonus: number[] = _.fill(Array(len), 0); // 计算得分\n\n  for (let i = 0; i < len; i++) {\n    const player = players[i];\n\n    if (player.score <= 0) {\n      continue;\n    }\n\n    let base = 1;\n    \n    if (i === banker) {\n      base = bankerCount;\n    }\n\n    for (let j = 0; j < len; j++) {\n      let b = base;\n\n      if (j === i) {\n        continue;\n      }\n\n      if (j === banker) {\n        b = bankerCount;\n      }\n\n      let s = player.score * b;\n      bonus[i] += s;\n      bonus[j] -= s;\n    }\n  }\n\n  for (let i = 0; i < len; i++) {\n    players[i].score = bonus[i];\n  }\n}\n\n// 添加放炮、接炮得分\nfunction addCannon(players: Player[], cannons: number[]): void {\n  players.forEach(function(player, i) {\n    player.score += cannons[i];\n  });\n}\n\n// 计算胡的牌型和分数\nfunction checkWin(player: Player): number {\n  const { bonus, chowTiles, handTiles } = player;\n  const winType = bonus.slice().sort(function(a: number, b: number): number {\n    return a - b;\n  })[0];\n  let base = 1;\n\n  // 检查牌型\n  let tiles = handTiles;\n  chowTiles.forEach(function(meld: MeldDetail) {\n    tiles = tiles.concat(meld.tiles);\n  });\n  \n  // 清一色\n  if (checkOneType(tiles)) {\n    base += 1;\n    player.winType.push(WinType.Uniform);\n  }\n\n  const size = groupSize(handTiles);\n\n  // 碰碰胡\n  if (checkAllPong(chowTiles, size)) {\n    base += 1;\n    player.winType.push(WinType.Pong);\n  }\n\n  if (handTiles.length === 14) {\n    if (checkPair(size)) {\n      // 七小对\n      base += 1;\n      player.winType.push(WinType.Pair);\n    } else if (checkLuxuryPair(size)) {\n      // 豪华七小对\n      base += 2;\n      player.winType.push(WinType.LuxuryPair);\n    } else if (checkUniq(handTiles)) {\n      // 十三幺\n      base += 12;\n      player.winType.push(WinType.Uniq);\n    }\n  }\n\n  if (!player.winType.length) {\n    player.winType.push(WinType.CommonHand);\n  }\n\n  switch(winType) {\n    case BonusType.Win:\n      base *= 1;\n      break;\n    case BonusType.SelfDraw:\n      base *= 2;\n      break;\n    case BonusType.Kong: \n      base *= 3;\n      break;\n    case BonusType.Sky:\n      base *= 3;\n      break;\n    case BonusType.Land:\n      base *= 3;\n      break;\n  }\n\n  return base;\n}\n\n// 清一色\nfunction checkOneType(tiles: number[]): boolean {\n  const typeGroups = Object.keys(groupByType(tiles));\n\n  return typeGroups.length === 1;\n}\n\n// 碰碰胡\nfunction checkAllPong(chowTiles: MeldDetail[], size: number): boolean {\n  for (let i = 0, len = chowTiles.length; i < len; i++) {\n    if (chowTiles[i].type < ClaimType.Pong) {\n      return false;\n    }\n  }\n\n  return _.pull(size.toString().split(''), '3').length === 1;\n}\n\n// 七小对\nfunction checkPair(size: number): boolean {\n  return !_.pull(size.toString().split(''), '2').length;\n}\n\n// 豪华七小对\nfunction checkLuxuryPair(size: number): boolean {\n  const remain = _.pull(size.toString().split(''), '2');\n\n  return remain.length === 1 && remain[0] === '4';\n}\n\n// 十三幺\nfunction checkUniq(tiles: number[]): boolean {\n  const uniqTiles = _.uniq(sortTiles(tiles.slice()));\n\n  return uniqTiles.length === 13 && _.isEqual(uniqTiles, thirteenOrphans);\n}\n\n// 花胡\nfunction checkFlower(player: Player): void {\n  if (_.indexOf(player.bonus, BonusType.FlowerSeason) > -1) {\n    player.score += 1;\n  }\n\n  if (_.indexOf(player.bonus, BonusType.FlowerBotany) > -1) {\n    player.score += 1;\n  }\n}\n\n// 杠\nfunction checkKong(player: Player, players: Player[], cannons: number[]): void {\n  player.chowTiles.forEach(function(meld: MeldDetail) {\n    if (meld.type === ClaimType.Expose) {\n      player.score += 1;\n      player.bonus.push(BonusType.Expose);\n      players[meld.from].bonus.push(BonusType.Cannon);\n      cannons[player.pick] += 1;\n      cannons[meld.from] -= 1;\n    }\n\n    if (meld.type === ClaimType.ConcealedKong || meld.type === ClaimType.ExposeSelfDraw) {\n      player.score += 2;\n      player.bonus.push(BonusType.ConcealedKong);\n    }\n  });\n}\n","import * as _ from 'lodash';\nimport Player from './player';\nimport { MeldDetail, Meld } from './meld';\nimport Round from './round';\nimport Wall from './wall';\nimport { sortTiles, ClaimType, Card, batchTilesSuit } from './tile';\nimport { canWin, canReadyHand, canClaim, canKong, canFlowerWin, hasPoint } from './rules/basic';\nimport { BonusType, WinType } from './rules/bonus';\n\n// 玩家\nexport default class PlayerDetail extends Player {\n  handTiles: number[];      // 手牌\n  discardTiles: number[];   // 出的牌\n  flowerTiles: number[];    // 花牌\n  chowTiles: MeldDetail[];  // 吃的牌\n  hasDiscard: boolean;  // 是否出过牌，用来判断天胡、地胡\n\n  readyHand: _.Dictionary<number[]>; // 出什么牌听什么牌\n  readyHandTiles: number[]; // 听的牌\n\n  canWin: boolean;  // 是否可以胡牌\n  eye: number[][];  // 将牌\n  remainTiles: number[];  // 没成组的牌\n\n  round: Round;\n  wall: Wall;\n\n  score: number;    // 分数\n  winFrom: number;  // 从谁那胡的\n  winType: Array<WinType>;  // 胡牌类型\n  bonus: Array<BonusType>;  // 奖励类型\n  threeMeld: number; // 三道\n  fourMeld: number;  // 四道\n  \n  meld: Meld;     // 这轮行动牌组\n  melds: Meld[];  // 这轮可以行动的牌组: 前台行动使用\n  discardClaim: boolean;  // 出牌行动标识: 前台行动使用\n  \n  isBanker: boolean;  // 是否庄家\n  hasPoint: boolean;  // 是否有番\n\n  constructor(id: number, name: string, pick: number, isAI: boolean = false) {\n    super(id, name, pick, isAI);\n\n    this.handTiles = [];\n    this.discardTiles = [];\n    this.flowerTiles = [];\n    this.chowTiles = [];\n    this.hasDiscard = false;\n\n    this.readyHand = {};\n    this.readyHandTiles = [];\n\n    this.canWin = true;\n    this.eye = [];\n    this.remainTiles = [];\n    \n    this.score = 0;\n    this.winFrom = -1;\n    this.winType = [];\n    this.bonus = [];\n    this.threeMeld = -1;\n    this.fourMeld = -1;\n\n    this.melds = [];\n    this.discardClaim = false;\n    this.hasPoint = false;\n  }\n\n  // 开始\n  start(round: Round, isBanker: boolean): void {\n    this.round = round;\n    this.wall = round.wall;\n    this.isBanker = isBanker;\n    this.discardClaim = isBanker;\n    this.openHand();\n\n    // 补花\n    if (isBanker) {\n      setTimeout(() => {\n        this.openCheck();\n      }, 0);\n    }\n  }\n\n  // 起牌\n  openHand(): void {\n    this.handTiles = this.wall.openHand(this.isBanker);\n    this.sort();\n    console.log('open', this.name, batchTilesSuit(this.handTiles));\n  }\n\n  // 抽牌\n  deal(): void {\n    this.discardClaim = true;\n    const tile = this.wall.deal();\n\n    if (tile === -1) {\n      this.round.draw();\n      return;\n    }\n\n    this.handTiles.push(tile);\n    this.check(tile, false);\n  }\n\n  // 后面抽牌\n  draw(): void {\n    this.discardClaim = true;\n    const tile = this.wall.draw();\n\n    if (tile === -1) {\n      this.round.draw();\n      return;\n    }\n\n    this.handTiles.push(tile);\n\n    if (this.handTiles.length % 3 !== 2) {\n      return;\n    }\n\n    this.check(tile, true);\n  }\n\n  // 出牌\n  discard(tile: number): void {\n    const i = this.handTiles.indexOf(tile);\n    this.discardClaim = false;\n    this.handTiles.splice(i, 1)[0];\n    this.discardTiles.push(tile);\n    this.sort();\n    this.hasDiscard = true;\n\n    const keys = Object.keys(this.readyHand);\n\n    if (keys.length) {\n      const idx = keys.indexOf(tile.toString());\n\n      if (idx > -1) {\n        this.readyHandTiles = this.readyHand[tile];\n      }\n    } else {\n      this.readyHandTiles = [];\n    }\n\n    this.round.check(tile);\n  }\n\n  // 出的牌被别人吃的，要移交给别人\n  tranfer(): void {\n    this.discardTiles.pop();\n  }\n\n  // 其他玩家出牌回合，检查自己是否需要这张牌\n  checkClaim(tile: number, canChow: boolean): boolean {\n    this.melds = [];\n    let melds: Meld[] = [];\n\n    if (this.checkWin(tile) && hasPoint(this)) {\n      melds.push({\n        type: ClaimType.Win,\n        tiles: []\n      });\n    }\n\n    melds = melds.concat(canClaim(this.handTiles, tile, canChow));\n\n    if (melds.length) {\n      melds.push({\n        type: ClaimType.None,\n        tiles: []\n      });\n\n      this.melds = melds;\n    }\n\n    return !!melds.length;\n  }\n\n  // 玩家选择行动\n  claim(idx: number) {\n    this.meld = this.melds[idx];\nconsole.log('claim', this.name, idx, this.melds);\n    if (this.meld) {\n      if (this.pick === this.round.player) {\n        this.action(-1);\n      } else {\n        this.round.claim(this.pick, this.meld.type);\n      }\n    }\n  }\n\n  // 真正的行动\n  action(from: number) {\n    const meld: MeldDetail = {\n      ...this.meld,\n      from: from  // -1表示自己\n    };\nconsole.log('action', this.name, meld);\n    switch(meld.type) {\n      // 胡牌，结束\n      case ClaimType.Win:\n      case ClaimType.SelfDraw:\n      case ClaimType.Kong:\n        let type = ClaimType[meld.type] as keyof typeof BonusType;\n        this.winFrom = from;\n        this.win(type);\n        this.round.finish(this.pick);\n        break;\n      // 杠\n      case ClaimType.ConcealedKong:\n      case ClaimType.Expose:\n        this.pull(meld);\n        this.chowTiles.push(meld);\n        this.checkBaoPai();\n        this.draw();\n        break;\n      // 碰牌杠\n      case ClaimType.ExposeSelfDraw:\n        this.checkBaoPai();\n        this.draw();\n        break;\n      // 碰、胡\n      case ClaimType.Chow:\n      case ClaimType.Pong:\n        this.pull(meld);\n        this.chowTiles.push(meld);\n        this.checkBaoPai();\n        this.discardClaim = true;\n        break;\n    }\n\n    // 吃完牌后检查是否听牌\n    canReadyHand(this);\n  }\n\n  // 判断是否包牌\n  private checkBaoPai(): void {\n    const chowTiles = this.chowTiles;\n    const len = chowTiles.length;\n\n    if (len >= 3) {\n      const groups = _.groupBy(chowTiles, 'from');\n      const keys = Object.keys(groups);\n      const kLen = keys.length;\n      \n      if (kLen > 2) {\n        return;\n      }\n\n      if ((len === 3 && kLen === 1)) {\n        this.threeMeld = parseInt(keys[0]);\n        return;\n      }\n\n      if (len === 4) {\n        if (kLen === 1) {\n          this.fourMeld = parseInt(keys[0]);\n          this.threeMeld = -1;\n        } else if (kLen === 2) {\n          if (groups[keys[0]].length === 3) {\n            this.threeMeld = parseInt(keys[0]);\n          } else {\n            this.threeMeld = parseInt(keys[1]);\n          }\n        }\n\n        return;\n      }\n    }\n  }\n\n  // 天胡、地胡\n  private win(type: keyof typeof BonusType): void {\n    if (!this.hasDiscard && !this.flowerTiles.length) {\n      // 手牌胡\n      type = this.isBanker ? 'Sky' : 'Land';\n    }\n\n    this.bonus.push(BonusType[type]);\n  }\n\n  // 自己摸牌回合检查\n  private check(tile: number, isDraw: boolean): void {\n    this.melds = [];\n\n    if (sortTiles(this.handTiles.slice()).slice(-1)[0] >= Card.Spring) {\n      this.checkFlower();\n      return;\n    }\n\n    let melds: Meld[] = [];\n    \n    if (this.checkWin(tile, true)) {\n      melds.push({\n        type: isDraw ? ClaimType.Kong : ClaimType.SelfDraw,\n        tiles: []\n      });\n    }\n\n    melds = melds.concat(canKong(this.handTiles, tile));\n\n    for (let i = 0, len = this.chowTiles.length; i < len; i++) {\n      const meld = this.chowTiles[i];\n\n      if (meld.type === ClaimType.Pong && meld.tiles[0] === tile) {\n        meld.tiles = [tile, tile, tile, tile];\n        meld.type = ClaimType.ExposeSelfDraw;\n        melds.push({\n          type: ClaimType.ExposeSelfDraw,\n          tiles: []\n        });\n      }\n    }\n\n    if (melds.length) {\n      this.melds = melds;\n      return;\n    }\n\n    canReadyHand(this);\n  }\n\n  // 胡牌\n  private checkWin(tile: number, bySelf: boolean = false): boolean {\n    if (!this.hasDiscard || (this.readyHandTiles.length && this.readyHandTiles.indexOf(tile) > -1)) {\n      // 再检查下是否能胡\n      return bySelf ? canWin(this) : canWin(this, tile);\n    }\n\n    return false;\n  }\n\n  // 补花\n  private checkFlower(): void {\n    let tiles: number[] = [];\n    const handTiles = sortTiles(this.handTiles.slice());\n\n    let idx = _.findIndex(handTiles, tile => tile >= Card.Spring);\n    \n    if (idx > -1) {\n      tiles = handTiles.splice(idx, handTiles.length - idx);\n    }\n\n    if (!tiles.length) {\n      return;\n    }\n\n    tiles.forEach(tile => {\n      this.handTiles.splice(this.handTiles.indexOf(tile), 1);\n    });\n\n    tiles.forEach(tile => {\n      if (tile >= Card.Spring) {\n        this.flowerTiles.push(tile);\n        this.flowerTiles = sortTiles(this.flowerTiles);\n        this.draw();\n        const count = canFlowerWin(this.flowerTiles, tile);\n  \n        if (count) {\n          count === 1 ? this.bonus.push(BonusType.FlowerSeason) : this.bonus.push(BonusType.FlowerBotany);\n        }\n      }\n    });\n  }\n\n  private openCheck(): void {\n    let melds: Meld[] = [];\n\n    if (this.checkWin(0, true)) {\n      melds.push({\n        type: ClaimType.SelfDraw,\n        tiles: []\n      });\n    }\n\n    const groups = _.groupBy(this.handTiles, function(tile) {\n      return tile / 1;\n    });\n\n    Object.keys(groups).forEach(function(key) {\n      const group = groups[key];\n\n      if (group.length === 4) {\n        melds.push({\n          type: ClaimType.ConcealedKong,\n          tiles: group\n        });\n      }\n    });\n\n    if (melds.length) {\n      this.melds = melds;\n    }\n\n    this.checkFlower();\n    canReadyHand(this);\n  }\n\n  private sort(): void {\n    this.handTiles = sortTiles(this.handTiles);\n  }\n\n  private pull(meld: MeldDetail): void {\n    const type = meld.type;\n    const tiles = meld.tiles.slice(0, -1);\n    const handTiles = this.handTiles;\n\n    if (type === ClaimType.Expose || type === ClaimType.ConcealedKong) {\n      _.pull(handTiles, ...tiles);\n\n      return;\n    }\n    \n    tiles.forEach(tile => {\n      handTiles.splice(handTiles.indexOf(tile), 1);\n    });\n  }\n};\n","import * as _ from 'lodash';\nimport Player from '../playerDetail';\nimport Round from '../round';\nimport { sortTiles, Card, ClaimType, batchTilesSuit } from '../tile';\nimport { groupByOrder } from '../rules/basic';\n\nexport default class PlayerAIBasic extends Player {\n  constructor(id: number, name: string, pick: number) {\n    super(id, name, pick, true);\n  }\n\n  start(round: Round, isBanker: boolean): void {\n    super.start(round, isBanker);\n\n    if (isBanker && this.handTiles.slice(-1)[0] < Card.Spring) {\n      setTimeout(() => {\n        if (this.melds.length) {\n          this.claimByAI();\n        }\n        \n        this.discardByAI();\n      }, 100);\n    }\n  }\n\n  // 抽牌\n  deal(): void {\n    const flowerLen = this.flowerTiles.length;\n    const chowLen = this.chowTiles.length;\n\n    super.deal();\n\n    if (flowerLen < this.flowerTiles.length || chowLen < this.chowTiles.length) {\n      return;\n    }\n\n    if (this.melds.length) {\n      this.claimByAI();\n      return;\n    }\n\n    this.discardByAI();\n  }\n\n  // 后面抽牌\n  draw(): void {\n    super.draw();\n\n    if (this.handTiles.length % 3 !== 2 || this.handTiles.slice(-1)[0] >= Card.Spring) {\n      return;\n    }\n\n    if (this.melds.length) {\n      this.claimByAI();\n      return;\n    }\n\n    this.discardByAI();\n  }\n\n  checkClaim(tile: number, canChow: boolean): boolean {\n    const hasClaim = super.checkClaim(tile, canChow);\n\n    if (hasClaim && this.melds.length) {\n      // 延迟后响应\n      setTimeout(() => {\n        this.claimByAI();\n      }, 500);\n    }\n\n    return hasClaim;\n  }\n\n  // 决定行动哪个\n  private claimByAI(): void {\n    // 找出行动的大小，行动最大的\n    const melds = this.melds;\n    const claims = melds.map(meld => meld.type);\n    const claim = _.max(claims);\n\n    if (typeof claim !== 'undefined') {\n      const idx = claims.indexOf(claim);\n\n      // 如果以听牌，不吃不碰\n      if (claim <= ClaimType.Pong && !_.isEmpty(this.readyHand)) {\n        super.claim(claims.length - 1);\n        return;\n      }\n\n      // 如果这不是remainTiles的牌，不吃\n      if (claim === ClaimType.Chow) {\n        const remainTiles = _.uniq(this.remainTiles.slice());\n        const union = _.union(remainTiles, melds[idx].tiles.slice(0, -1));\n\n        if (union.length !== remainTiles.length) {\n          // 如果还有其他的吃牌组合，继续判断\n          if (melds.length > 2) {\n            melds.splice(0, 1);\n            this.claimByAI();\n\n            return;\n          }\n\n          super.claim(claims.length - 1);\n          return;\n        }\n      }\n      \n      super.claim(idx);\n\n      setTimeout(() => {\n        // 如果胡牌、杠，不继续\n        if (claim >= ClaimType.Expose || this.round.winner > -1) {\n          return;\n        }\n\n        if (this.round.player === this.pick) {\n          this.discardByAI();\n        }\n      }, 500);\n    }\n  }\n\n  // 决定出哪张牌\n  private discardByAI(): void {\n    let tile: number = 0;\n    \n    if (!_.isEmpty(this.readyHand)) {\n      console.log('readyhand', JSON.stringify(this.readyHand));\n      // 如果听牌，最简单\n      const keys = Object.keys(this.readyHand);\n\n      // 从牌面算概率，听哪张牌赢得概率最大\n      if (keys.length > 1) {\n        const tiles = keys.map(key => this.readyHand[key]);\n        const probabilities = this.probabilityCalculate(_.concat([], ...tiles), true);\n        let max: number = -1;\n\n        keys.forEach(key => {\n          let p: number = 0;\n\n          this.readyHand[key].forEach(tile => {\n            p += probabilities[tile];\n          });\n\n          if (p > max) {\n            tile = parseInt(key);\n            max = p;\n          }\n        });\n        // TODO: 会出现叫死牌的情况\n      } else {\n        tile = parseInt(keys[0]);\n      }\n    } else {\n      // 否则，找单牌出\n      const remainTiles = sortTiles(this.remainTiles);\n      const len = remainTiles.length;\n      console.log('remain', remainTiles);\n      if (len) {\n        let tiles: number[] = [];\n\n        // 优先出大字\n        tiles = _.filter(remainTiles, function(item) {\n          return item >= Card.East && item <= Card.Spring;\n        });\n\n        if (!tiles.length) {\n          // 找到不连续的牌\n          let groups = groupByOrder(remainTiles.slice(), 2);\n          \n          groups.forEach(group => {\n            if (group.length === 1) {\n              tiles.push(group[0]);\n            }\n          });\n\n          if (!tiles.length) {\n            groups = groupByOrder(remainTiles.slice(), 1);\n            groups.forEach(group => {\n              if (group.length === 1) {\n                tiles.push(group[0]);\n              }\n            });\n          }\n\n          if (!tiles.length) {\n            tiles = remainTiles;\n          }\n\n          let oneAndNightTiles = _.filter(tiles, function(item) {\n            const r = item % 10;\n            return r === 1 || r === 9;\n          });\n\n          if (oneAndNightTiles.length) {\n            tiles = oneAndNightTiles;\n          }\n        }\n\n        console.log('tiles', tiles);\n\n        if (tiles.length === 1) {\n          tile = tiles[0];\n        } else {\n          // 再从牌面看，优先出不会放炮的牌\n          const probabilities = this.probabilityCalculate(tiles);\n          let max: number = 5;\n\n          for (let key in probabilities) {\n            if (probabilities[key] < max) {\n              tile = parseInt(key);\n              max = probabilities[key];\n            }\n          }\n        }\n      }\n    }\n\n    if (tile) {\n      console.log('discard', this.name, batchTilesSuit([tile]));\n      super.discard(tile);\n    }\n  }\n\n  private probabilityCalculate(tiles: number[], addHandTile: boolean = false): _.Dictionary<number> {\n    const probabilities: _.Dictionary<number> = {};\n    const players = this.round.players;\n    const visibleTiles = _.concat([], ...players.map(player => {\n      return player.discardTiles.concat(_.concat([], ...player.chowTiles.map(meld => meld.tiles)))\n    }));\n\n    if (addHandTile) {\n      visibleTiles.splice(visibleTiles.length, 0, ...this.handTiles);\n    }\n    \n    const groups = _.groupBy(visibleTiles, function(tile) {\n      return tile / 1;\n    });\n\n    tiles.forEach(tile => {\n      probabilities[tile] = 4;\n\n      if (groups[tile]) {\n        probabilities[tile] = 4 - groups[tile].length;\n      }\n    });\n\n    return probabilities;\n  }\n};\n","import { getTiles, shuffleTiles } from './tile';\n\nexport default class Wall {\n  tiles: number[];\n\n  constructor(hasWind = true, hasDragon = true, hasFlower = true) {\n    this.tiles = shuffleTiles(getTiles(hasWind, hasDragon, hasFlower));\n  }\n\n  openHand(isBanker: boolean): number[] {\n    return this.tiles.splice(0, isBanker ? 14 : 13);\n  }\n\n  isDead(): boolean {\n    return this.tiles.length < 16;\n  }\n\n  // 海底包牌\n  willDead(): boolean {\n    return this.tiles.length >= 16 && this.tiles.length <= 19;\n  }\n\n  // 摸牌\n  deal(): number {\n    if (this.isDead()) {\n      return -1;\n    }\n\n    return this.tiles.shift() || -1;\n  }\n\n  // 花杠\n  draw(): number {\n    if (this.isDead()) {\n      return -1;\n    }\n\n    return this.tiles.pop() || -1;\n  }\n};\n","import * as _ from 'lodash';\nimport Game from './game';\nimport Player from './playerDetail';\nimport AI from './ai/basic';\nimport Wall from './wall';\nimport { calculate, BonusType } from './rules/bonus';\nimport { ClaimType, batchTilesSuit } from './tile';\n\nconst defaultOrder = [0, 1, 2, 3];\n\n// 局\nexport default class Round {\n  game: Game;         // 桌     \n  players: Player[];  // 玩家\n  player: number;     // 当前出牌的玩家\n  winner: number;     // 赢家\n  wall: Wall;         // 牌\n  claims: ClaimType[]; // 每个玩家提出的行动\n  canClaims: number[]; // 每个玩家是否能行动, 0不能行动，1可以行动\n  firstFlow: number;\n\n  constructor(game: Game) {\n    this.game = game;\n    this.players = [];\n    game.players.forEach((player) => {\n      this.addPlayer(player.id, player.name, player.pick, player.isAI);\n    });\n    this.claims = [-1, -1, -1, -1];\n    this.canClaims = [0, 0, 0, 0];\n    this.firstFlow = 4;\n    this.winner = -1;\n  }\n\n  addPlayer(id: number, name: string, pick: number, isAI: boolean = false): void {\n    const player = isAI ? new AI(id, name, pick) : new Player(id, name, pick);\n    this.players.push(player);\n  }\n\n  // 开局\n  start() {\n    this.wall = new Wall();\n    const banker = this.game.banker;\n    const order = defaultOrder.slice(banker).concat(defaultOrder.slice(0, banker));\n    this.player = banker;\n\n    order.forEach((pick, i) => {\n      this.players[pick].start(this, !i);\n    });\n  }\n\n  // 结束\n  finish(player: number) {\n    this.winner = player;\n    console.log('win', this.winner, batchTilesSuit(this.players[player].handTiles), this.players[player].chowTiles, this.players[player].bonus);\n    calculate(this);\n    this.game.finish();\n  }\n\n  // 流局\n  draw() {\n    console.log('draw', '---------');\n    this.winner = this.game.banker;\n    this.game.finish();\n  }\n\n  // 上家出牌，检查哪个玩家能行动\n  check(tile: number) {\n    this.checkFirstFlow(tile);\n\n    this.players.forEach((player, i) => {\n      if (this.player === i) {\n        return;\n      }\n\n      this.canClaims[i] = player.checkClaim(tile, i === this.getNext()) ? 1 : 0;\n    });\n\n    // 大家都不能行动，直接下家\n    // 大家能行动，等待行动指令\n    if (this.canClaims.join('') === '0000') {\n      this.next();\n    }\n  }\n\n  // 玩家行动\n  claim(player: number, claim: ClaimType) {\n    this.firstFlow = 0; // 有人行动，就不会形成首张被跟\n    this.claims[player] = claim;\nconsole.log('player claim', this.players[player].name, this.canClaims, this.claims);\n    // 所有玩家都行动完，检查谁可以行动\n    if (_.pull(this.canClaims.slice(), 0).length === _.pull(this.claims.slice(), -1).length) {\n      // 如果大家都不行动\n      if (_.uniq(_.pull(this.claims.slice(), -1)).join('') === '0') {\n        this.claims = [-1, -1, -1, -1];\n        this.canClaims = [0, 0, 0, 0];\n        this.next();\n      } else {\n        const idx = _.max(this.claims);\n\n        if (idx) {\n          player = this.claims.indexOf(idx);\n          this.players[this.player].tranfer();\n          this.players[player].action(this.player);\n          this.player = player;\n        }\n\n        this.claims = [-1, -1, -1, -1];\n        this.canClaims = [0, 0, 0, 0];\n\n        if (!idx) {\n          this.next();\n        }\n      }\n    }\n  }\n\n  // 谁行动\n  next() {\n    if (this.winner > -1) {\n      return;\n    }\n\n    this.player = this.getNext();\n    console.log('next player', this.players[this.player].name, '-------------');\n    this.players.forEach(player => {\n      console.log(player.name, batchTilesSuit(player.handTiles), '---', batchTilesSuit(player.discardTiles), '---', batchTilesSuit(player.flowerTiles), player.chowTiles);\n    })\n    this.players[this.player].deal();\n  }\n\n  // 检查首张被跟\n  private checkFirstFlow(tile: number): void {\n    // 第4轮检查大家手牌，看是不是首张被跟\n    if (!this.firstFlow) {\n      return;\n    } else {\n      let flag = true;\n\n      for (let i = 0, len = this.players.length; i < len; i++) {\n        if (i === this.player) {\n          continue;\n        }\n\n        const player = this.players[i];\n\n        if (player.discardTiles.length && player.discardTiles[0] !== tile) {\n          flag = false;\n          break;\n        }\n      }\n\n      if (flag) {\n        if (this.firstFlow === 1) {\n          this.players[this.game.banker].bonus.push(BonusType.FirstFollow);\n        }\n\n        this.firstFlow--;\n      } else {\n        this.firstFlow = 0;\n      }\n    }\n  }\n\n  private getNext(): number {\n    return (this.player + 1) % 4;\n  }\n};\n","import Player from './player';\nimport Round from './round';\nimport { Pick } from './tile';\n\n// 桌\nexport default class Game {\n  players: Player[];  // 玩家\n  rounds: Round[];    // 局\n  order: number;      // 令\n  banker: number;     // 庄家\n  bankerCount: number;// 庄数\n  bonus: number[];     // 分数\n\n  constructor() {\n    this.order = Pick.East;\n    this.banker = 0;\n    this.bankerCount = 0;\n    this.bonus = [];\n    this.players = [];\n    this.rounds = [];\n  }\n\n  // 添加玩家\n  addPlayer(id: number, name: string, isAI: boolean = false): void {\n    const len = this.players.length;\n\n    if (len >= 4) {\n      console.log('座位已满!');\n      return;\n    }\n\n    const player = new Player(id, name, len, isAI);\n    this.players.push(player);\n  }\n\n  // 开局\n  start() {\n    if (this.players.length < 4) {\n      console.log('人数不够，不能开始!');\n      return;\n    }\n\n    const round = new Round(this);\n    round.start();\n    this.rounds.push(round);\n  }\n\n  // 本局结束，进入下一局\n  finish() {\n    const len = this.rounds.length;\n\n    if (len) {\n      // 换庄\n      const round = this.rounds[len - 1];\n\n      if (round.winner !== this.banker) {\n        this.banker++;\n        this.bankerCount = 0;\n\n        if (this.banker > 3) {\n          this.banker = 0;\n          this.order++;\n        }\n\n        if (this.order > 4) {\n          this.order = Pick.East;\n        }\n      } else {\n        this.bankerCount++;\n      }\n\n      // 下一局\n      // this.start();\n    }\n  }\n  \n  end() {\n    for (let i = 0, len = this.players.length; i < len; i++) {\n      this.bonus[i] = 0;\n    }\n\n    const bonus = this.bonus;\n\n    this.rounds.forEach(round => {\n      round.players.forEach((player, i) => {\n        bonus[i] += player.score;\n      });\n    });\n  }\n};\n","// import './tile';\n// import './player';\nimport Player from './playerDetail';\n// import './rules/basic';\n// import './ai/basic';\nimport Game from './game';\n\n// const game = new Game();\n// game.addPlayer(1, 'test1', true);\n// game.addPlayer(2, 'test2', true);\n// game.addPlayer(3, 'test3', true);\n// game.addPlayer(4, 'test4', true);\n// game.start();\n\n// const player = new Player(1, 'AI', 0);\n// player.handTiles = [12, 12, 14, 14, 16, 17, 18, 21, 21, 22, 25, 25, 27, 29];\n// canReadyHand(player);\n\nexport default {\n  Player,\n  Game\n};\n"],"names":["_.shuffle","_.findIndex","_.groupBy","_.indexOf","_.isEmpty","_.union","groupBy","_.uniq","_.pull","max","_.fill","_.values","_.xor","thirteenOrphans","checkKong","checkPair","checkUniq","_.isEqual","tslib_1.__extends","Player","_.max","union","_.concat","_.filter","AI"],"mappings":"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AC,KAAK,EAAC,MAAM,EAAC,OAAO,EAAC,QAAQ,EAAC,KAAK,EAAC,KAAK,EAAC,KAAK,EAAC,KAAK,EAAC,MAAM,EAAC,MAAM,EAAC,OAAO,EAAC,QAAQ,EAAC,SAAS,EAAC,MAAM,EAAC,MAAM,EAAC,MAAM,EAAC,MAAM,EAAC,MAAM,EAAC,MAAM,EAAC,OAAO,EAAC,GAAG,EAAC,GAAG,EAAC,IAAI,EAAC,GAAG,EAAC,IAAI,EAAC,IAAI,EAAC,OAAO,EAAC,KAAK,EAAC,IAAI,EAAC,KAAK,EAAC,MAAM,EAAC,OAAO,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,KAAK,EAAC,KAAK,CAAC,EAAC,IAAI,EAAC,CAAC,GAAG,EAAC,IAAI,EAAC,KAAK,EAAC,MAAM,EAAC,IAAI,EAAC,IAAI,EAAC,KAAK,EAAC,MAAM,EAAC,OAAO,EAAC,IAAI,EAAC,KAAK,EAAC,KAAK,EAAC,MAAM,EAAC,OAAO,EAAC,QAAQ,EAAC,KAAK,EAAC,KAAK,EAAC,MAAM,EAAC,MAAM,EAAC,OAAO,EAAC,QAAQ,EAAC,SAAS,EAAC,MAAM,EAAC,MAAM,EAAC,MAAM,EAAC,OAAO,EAAC,OAAO,EAAC,KAAK,EAAC,IAAI,EAAC,KAAK,EAAC,MAAM,EAAC,OAAO,EAAC,IAAI,EAAC,KAAK,EAAC,KAAK,EAAC,MAAM,EAAC,OAAO,EAAC,QAAQ,EAAC,KAAK,EAAC,KAAK,EAAC,MAAM,EAAC,MAAM,EAAC,OAAO,EAAC,QAAQ,EAAC,SAAS,EAAC,MAAM,EAAC,MAAM,EAAC,MAAM,EAAC,OAAO,EAAC,OAAO,EAAC,QAAQ,EAAC,SAAS,EAAC,OAAO,EAAC,OAAO,EAAC,OAAO,EAAC,OAAO,EAAC,OAAO,EAAC,QAAQ,EAAC,IAAI,EAAC,KAAK,EAAC,KAAK,EAAC,QAAQ,EAAC,MAAM,EAAC,KAAK,EAAC,MAAM,EAAC,OAAO,EAAC,QAAQ,EAAC,KAAK,EAAC,KAAK,EAAC,MAAM,EAAC,MAAM,EAAC,OAAO,EAAC,QAAQ,EAAC,SAAS,EAAC,MAAM,EAAC,MAAM,EAAC,MAAM,EAAC,OAAO,EAAC,OAAO,EAAC,QAAQ,EAAC,SAAS,EAAC,OAAO,EAAC,OAAO,EAAC,OAAO,EAAC,OAAO,EAAC,OAAO,EAAC,QAAQ,EAAC,QAAQ,EAAC,SAAS,EAAC,SAAS,EAAC,QAAQ,EAAC,QAAQ,EAAC,QAAQ,EAAC,QAAQ,EAAC,QAAQ,EAAC,QAAQ,EAAC,QAAQ,EAAC,KAAK,EAAC,KAAK,EAAC,KAAK,EAAC,MAAM,EAAC,KAAK,EAAC,KAAK,EAAC,MAAM,EAAC,KAAK,EAAC,MAAM,EAAC,MAAM,EAAC,SAAS,EAAC,OAAO,EAAC,MAAM,EAAC,OAAO,EAAC,QAAQ,EAAC,SAAS,EAAC,MAAM,EAAC,MAAM,EAAC,MAAM,EAAC,OAAO,EAAC,OAAO,EAAC,QAAQ,EAAC,SAAS,EAAC,OAAO,EAAC,OAAO,EAAC,OAAO,EAAC,OAAO,EAAC,OAAO,EAAC,QAAQ,EAAC,QAAQ,EAAC,SAAS,EAAC,SAAS,EAAC,QAAQ,EAAC,QAAQ,EAAC,QAAQ,EAAC,QAAQ,EAAC,QAAQ,EAAC,QAAQ,EAAC,QAAQ,EAAC,SAAS,EAAC,SAAS,EAAC,SAAS,EAAC,SAAS,EAAC,SAAS,EAAC,SAAS,EAAC,SAAS,EAAC,SAAS,EAAC,SAAS,EAAC,SAAS,EAAC,MAAM,EAAC,MAAM,EAAC,MAAM,EAAC,MAAM,EAAC,MAAM,EAAC,OAAO,EAAC,MAAM,EAAC,MAAM,EAAC,MAAM,EAAC,MAAM,EAAC,OAAO,EAAC,MAAM,EAAC,MAAM,EAAC,MAAM,EAAC,OAAO,EAAC,MAAM,EAAC,MAAM,EAAC,OAAO,EAAC,MAAM,EAAC,OAAO,EAAC,OAAO,EAAC,QAAQ,EAAC,IAAI,EAAC,IAAI,EAAC,OAAO,EAAC,KAAK,EAAC,OAAO,EAAC,KAAK,EAAC,OAAO,EAAC,OAAO,EAAC,QAAQ,EAAC,SAAS,EAAC,OAAO,EAAC,OAAO,EAAC,OAAO,EAAC,QAAQ,EAAC,QAAQ,EAAC,KAAK,EAAC,MAAM,EAAC,OAAO,EAAC,KAAK,EAAC,KAAK,EAAC,MAAM,EAAC,OAAO,EAAC,QAAQ,EAAC,KAAK,EAAC,KAAK,EAAC,MAAM,EAAC,MAAM,EAAC,OAAO,EAAC,QAAQ,EAAC,MAAM,EAAC,MAAM,EAAC,MAAM,EAAC,MAAM,EA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"}