{"code":"// 基础规则\r\nimport * as _ from 'lodash';\r\nimport { Card, ClaimType, sortTiles } from '../tile';\r\nexport function readyHand(tiles) {\r\n    tiles = sortTiles(tiles);\r\n    var groups = groupBy(tiles);\r\n    var orderGroups = getOrderGroup(tiles);\r\n    var soleTiles = checkSoleTiles(groups, orderGroups);\r\n    if (soleTiles.length > 1) {\r\n        return false;\r\n    }\r\n    // 分析是不是只差一组就全部成组，是就可以听牌，不是继续找出可以不成组的牌\r\n    // const datum: number = Math.floor((tiles.length - 2) / 2);  // 最少多少成组才算听牌\r\n    var pairs = []; // 保存成组的牌\r\n    var melds = []; // 保存对子\r\n    // 找出大字是不是能凑成组\r\n    checkWordTiles(groups, melds, pairs);\r\n    // 找出剩余单排，是不是能凑成组\r\n    checkSingleTile(groups, orderGroups, melds, pairs);\r\n    // 检查剩余的牌\r\n    checkNumberalTiles(groups, orderGroups, melds /*, pairs, soleTiles*/);\r\n    if (soleTiles.length > 1) {\r\n        return false;\r\n    }\r\n    // 七小对\r\n    return true;\r\n}\r\n;\r\n// 检查剩余可能成组的数字牌\r\nfunction checkNumberalTiles(groups, orderGroups, melds /*, pairs: number[][], soleTiles: number[]*/) {\r\n    orderGroups.forEach(function (group) {\r\n        if (!group.length) {\r\n            // 找出这个顺序牌总共有多少牌，能不能成为3的倍数，能可能成组，否则不能成组\r\n            // 先找出能成组的\r\n            var tiles_1 = [];\r\n            var leastTwoTiles_1 = [];\r\n            group.forEach(function (tile) {\r\n                var _tiles = groups[tile];\r\n                tiles_1 = tiles_1.concat(_tiles);\r\n                // 检查有没有2个以上的，这个待会会重点检查，没有2个以上，那必须是顺子\r\n                if (_tiles.length > 1) {\r\n                    leastTwoTiles_1.push(tile);\r\n                }\r\n            });\r\n            var len = tiles_1.length;\r\n            if (len % 3 === 0) {\r\n                if (!leastTwoTiles_1.length) {\r\n                    // 没有2个以上，必须是顺子\r\n                    var flag = true;\r\n                    for (var i = 1; i < len; i++) {\r\n                        if (group[i] - group[i - 1] > 1) {\r\n                            flag = false;\r\n                            break;\r\n                        }\r\n                    }\r\n                    if (flag) {\r\n                        _.chunk(group).forEach(function (tiles) {\r\n                            melds.push({\r\n                                tiles: tiles,\r\n                                type: ClaimType.Chow\r\n                            });\r\n                        });\r\n                        excludeGroup(groups, group);\r\n                    }\r\n                }\r\n                else {\r\n                    // 有对子，那就复杂了\r\n                    // 先看下是不是都是碰子\r\n                }\r\n            }\r\n            else {\r\n                // 检查是不是有没有对子\r\n            }\r\n        }\r\n    });\r\n}\r\n// 去掉确定成组的组\r\nfunction excludeGroup(groups, group) {\r\n    group.forEach(function (tile) {\r\n        delete groups[tile];\r\n    });\r\n    group.length = 0;\r\n}\r\n// 检查大字\r\nfunction checkWordTiles(groups, melds, pairs) {\r\n    for (var key in groups) {\r\n        if (parseInt(key) >= Card.East) {\r\n            var tiles = groups[key];\r\n            var len = tiles.length;\r\n            if (len === 2) {\r\n                pairs.push(tiles);\r\n            }\r\n            else {\r\n                melds.push({\r\n                    tiles: tiles,\r\n                    type: len === 3 ? ClaimType.Pong : ClaimType.Kong\r\n                });\r\n            }\r\n            delete groups[key];\r\n        }\r\n    }\r\n}\r\n// 找出剩余的单排，是不是能凑成组\r\nfunction checkSingleTile(groups, orderGroups, melds, pairs) {\r\n    orderGroups.forEach(function (group) {\r\n        if (group.length === 1) {\r\n            var tiles = groups[group[0]];\r\n            var len = tiles.length;\r\n            if (len === 2) {\r\n                pairs.push(tiles);\r\n            }\r\n            else {\r\n                melds.push({\r\n                    tiles: tiles,\r\n                    type: len === 3 ? ClaimType.Pong : ClaimType.Kong\r\n                });\r\n            }\r\n            excludeGroup(groups, group);\r\n        }\r\n    });\r\n}\r\n// 检查不可能成组的牌\r\nfunction checkSoleTiles(groups, orderGroups) {\r\n    var soleTiles = [];\r\n    orderGroups.forEach(function (group) {\r\n        if (group.length === 1 && groups[group[0]].length === 1) {\r\n            soleTiles.push(group[0]);\r\n            excludeGroup(groups, group);\r\n        }\r\n    });\r\n    var keys = Object.keys(groups);\r\n    var idx = _.findIndex(keys, function (key) {\r\n        return parseInt(key) >= Card.East;\r\n    });\r\n    if (idx > -1) {\r\n        keys.slice(idx).forEach(function (key) {\r\n            if (groups[key].length === 1) {\r\n                soleTiles.push(parseInt(key));\r\n                delete groups[key];\r\n            }\r\n        });\r\n    }\r\n    return soleTiles;\r\n}\r\nfunction getOrderGroup(tiles) {\r\n    var characterTiles = [];\r\n    var dotTiles = [];\r\n    var bambooTiles = [];\r\n    tiles.forEach(function (tile) {\r\n        if (tile < Card.DotOne) {\r\n            characterTiles.push(tile);\r\n        }\r\n        else if (tile < Card.BambooOne) {\r\n            dotTiles.push(tile);\r\n        }\r\n        else if (tile < Card.East) {\r\n            bambooTiles.push(tile);\r\n        }\r\n    });\r\n    var orderGroups = [];\r\n    if (characterTiles.length) {\r\n        orderGroups = orderGroups.concat(groupByOrder(_.uniq(characterTiles)));\r\n    }\r\n    if (dotTiles.length) {\r\n        orderGroups = orderGroups.concat(groupByOrder(_.uniq(dotTiles)));\r\n    }\r\n    if (bambooTiles.length) {\r\n        orderGroups = orderGroups.concat(groupByOrder(_.uniq(bambooTiles)));\r\n    }\r\n    return orderGroups;\r\n}\r\n;\r\n// 找到顺序分组\r\nfunction groupByOrder(tiles) {\r\n    var groups = [];\r\n    var lastTile = tiles.splice(0, 1)[0];\r\n    var group = [lastTile];\r\n    var len = tiles.length;\r\n    for (var i = 0; i < len; i++) {\r\n        var tile = tiles[i];\r\n        if (tile - lastTile <= 2) {\r\n            group.push(tile);\r\n        }\r\n        else {\r\n            groups.push(group);\r\n            group = [tile];\r\n        }\r\n        lastTile = tile;\r\n    }\r\n    groups.push(group);\r\n    return groups;\r\n}\r\n;\r\n// 找出对子或者单牌\r\n// function getNotSomeTile(groups: _.Dictionary<number[]>, soleTiles: number[], pairTiles: number[][]): void {\r\n//   for (let i in groups) {\r\n//     const group = groups[i];\r\n//     const len = group.length;\r\n//     if (len === 1) {\r\n//       soleTiles.push(group[0]);\r\n//     } else if (len === 2) {\r\n//       pairTiles.push(group);\r\n//     }\r\n//   }\r\n// }\r\n// 分组\r\nfunction groupBy(tiles) {\r\n    return _.groupBy(tiles, function (tile) {\r\n        return tile / 1;\r\n    });\r\n}\r\n;\r\n// 胡的条件\r\n// 需要目，吃，碰\r\n// 字牌\r\n// function wordCardClaim() {\r\n// }\r\n// 是否可以行动\r\nexport function canClaim(tiles, tile) {\r\n    var melds = [];\r\n    melds = canPong(tiles, tile);\r\n    if (tile < Card.East) {\r\n        melds = melds.concat(canChow(tiles, tile));\r\n    }\r\n    return melds;\r\n}\r\n;\r\nexport function canPong(tiles, tile) {\r\n    var melds = [];\r\n    var someTiles = getSomeTile(tiles, tile);\r\n    var len = someTiles.length;\r\n    if (len && len >= 2) {\r\n        melds = canKong(someTiles, tile);\r\n        melds[melds.length] = {\r\n            tiles: melds.length ? someTiles : someTiles.concat(tile),\r\n            type: ClaimType.Pong\r\n        };\r\n    }\r\n    return melds;\r\n}\r\n;\r\nexport function canKong(tiles, tile) {\r\n    var melds = [];\r\n    if (tiles.length === 3) {\r\n        melds[0] = {\r\n            tiles: tiles.concat(tile),\r\n            type: ClaimType.Kong\r\n        };\r\n    }\r\n    return melds;\r\n}\r\n;\r\n// 是否可以吃\r\nexport function canChow(tiles, tile) {\r\n    var melds = [];\r\n    var rangeTiles = getRangeTile(tiles, tile);\r\n    var sequences = getSequence(rangeTiles, tile);\r\n    melds = sequences.map(function (sequence) {\r\n        return {\r\n            tiles: sequence,\r\n            type: ClaimType.Chow\r\n        };\r\n    });\r\n    return melds;\r\n}\r\n;\r\n// 获取相同的牌\r\nfunction getSomeTile(tiles, tile) {\r\n    var result = [];\r\n    tiles.forEach(function (i) {\r\n        if (i === tile) {\r\n            result.push(i);\r\n        }\r\n    });\r\n    return result;\r\n}\r\n// 获取指定范围的牌\r\nfunction getRangeTile(tiles, tile) {\r\n    var result = [];\r\n    var remainder = tile % 9;\r\n    var left = remainder - 2;\r\n    left = left >= 2 ?\r\n        tile - 2 :\r\n        tile - remainder;\r\n    var right = 8 - (remainder + 2);\r\n    right = right >= 0 ?\r\n        tile + 2 :\r\n        tile + 8 - remainder;\r\n    tiles.forEach(function (i) {\r\n        if (i >= left && i <= right) {\r\n            result.push(i);\r\n        }\r\n    });\r\n    return result;\r\n}\r\n// 获取顺子\r\nfunction getSequence(tiles, tile) {\r\n    var melds = [];\r\n    tiles = _.uniq(_.xor(tiles, [tile]));\r\n    // 将牌组组成3个一起，然后判断是否是顺子\r\n    if (tiles.length >= 2) {\r\n        var sequences = [];\r\n        for (var i = 0; i < tiles.length - 1; i++) {\r\n            sequences.push([tiles[i], tiles[i + 1], tile]);\r\n        }\r\n        sequences.forEach(function (meld) {\r\n            var newMeld = sortTiles(meld);\r\n            if (newMeld[0] === newMeld[1] - 1 && newMeld[2] === newMeld[1] + 1) {\r\n                melds.push(meld);\r\n            }\r\n        });\r\n    }\r\n    return melds;\r\n}\r\n//# sourceMappingURL=basic.js.map","map":{"version":3,"file":"basic.js","sourceRoot":"","sources":["../src/rules/basic.ts"],"names":[],"mappings":"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"},"dts":{"name":"/Users/okbeng/git/mahjong/rules/basic.d.ts","text":"import { Meld } from '../meld';\r\nexport declare function readyHand(tiles: number[]): boolean;\r\nexport declare function canClaim(tiles: number[], tile: number): Meld[];\r\nexport declare function canPong(tiles: number[], tile: number): Meld[];\r\nexport declare function canKong(tiles: number[], tile: number): Meld[];\r\nexport declare function canChow(tiles: number[], tile: number): Meld[];\r\n"}}
